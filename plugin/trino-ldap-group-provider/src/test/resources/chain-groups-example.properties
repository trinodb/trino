# Example configuration for LDAP chain-based nested groups support
# This file demonstrates how to configure Trino to use LDAP_MATCHING_RULE_IN_CHAIN
# for efficient nested group resolution

# Basic LDAP connection settings
ldap.url=ldaps://ldap.example.com:636
ldap.allow-insecure=false
ldap.admin-user=cn=admin,dc=example,dc=com
ldap.admin-password=admin_password

# User search settings
ldap.user-base-dn=ou=users,dc=example,dc=com
ldap.user-search-filter=(uid={0})

# Group settings
ldap.group-name-attribute=cn
ldap.group-base-dn=ou=groups,dc=example,dc=com

# Enable chain-based nested groups (recommended approach)
ldap.use-chain-groups=true

# Chain-based groups configuration
ldap.group-search-member-attribute=member
ldap.group-search-filter=(cn=trino_*)

# SSL/TLS settings (recommended for production)
ldap.ssl.keystore.path=/path/to/keystore.jks
ldap.ssl.keystore.password=keystore_password
ldap.ssl.truststore.path=/path/to/truststore.jks
ldap.ssl.truststore.password=truststore_password

# Timeout settings
ldap.timeout.connect=10s
ldap.timeout.read=30s

# Example group hierarchy this configuration supports:
# 
# All Users
# ├── Developers
# │   ├── Frontend Developers
# │   │   └── User: alice
# │   └── Backend Developers
# │       └── User: bob
# └── Operations
#     ├── DevOps Engineers
#     │   └── User: charlie
#     └── System Administrators
#         └── User: david
#
# With this configuration:
# - alice would be a member of: Frontend Developers, Developers, All Users
# - bob would be a member of: Backend Developers, Developers, All Users
# - charlie would be a member of: DevOps Engineers, Operations, All Users
# - david would be a member of: System Administrators, Operations, All Users
#
# The LDAP_MATCHING_RULE_IN_CHAIN will efficiently resolve all nested
# group memberships in a single LDAP query, making this approach much
# more performant than recursive queries.

