/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.json.regex;

import com.google.common.collect.BoundType;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.Range;
import com.google.common.collect.RangeSet;
import com.google.common.collect.TreeRangeSet;
import io.airlift.jcodings.ApplyAllCaseFoldFunction;
import io.airlift.jcodings.CaseFoldCodeItem;
import io.airlift.jcodings.CodeRange;
import io.airlift.jcodings.Encoding;
import io.airlift.jcodings.IntHolder;
import io.airlift.jcodings.constants.CharacterType;
import io.airlift.jcodings.exception.CharacterPropertyException;
import io.airlift.jcodings.specific.NonStrictUTF8Encoding;
import io.airlift.jcodings.util.BytesHash;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Verify.verify;
import static io.airlift.jcodings.exception.ErrorMessages.ERR_INVALID_CHAR_PROPERTY_NAME;
import static io.trino.json.regex.XQuerySqlEncoding.CodePointSet.privateCodePointSet;
import static io.trino.json.regex.XQuerySqlEncoding.CodePointSet.publicCodePointSet;
import static java.nio.charset.StandardCharsets.UTF_8;

/**
 * The <a href="https://www.w3.org/TR/xmlschema-2/#regexs">XML Schema Part 2: Datatypes Second Edition</a> specification
 * (later referred to as the XSD 1.0 specification) defines both the recognized values of the "General Category" property
 * for entries in the Unicode Database and named UCS blocks with their corresponding code point ranges. Additionally,
 * it includes two key notes:
 * <ul>
 *   <li>Unicode Database is subject to future revision. For example, the mapping from code points to character properties
 *       might be updated All <b>minimally conforming</b> processors <b>must</b> support the character properties defined in the
 *       version of Unicode Database that is current at the time this specification became a W3C Recommendation. However, implementors
 *       are encouraged to support the character properties defined in any future version.</li>
 *   <li>Unicode Database is subject to future revision. For example, the grouping of code points into blocks might be updated.
 *       All <b>minimally conforming</b> processors <b>must</b> support the blocks defined in the version of Unicode Database
 *       that is current at the time this specification became a W3C Recommendation. However, implementors are encouraged to
 *       support the blocks defined in any future version of the Unicode Standard.</li>
 * </ul>
 * <p>
 * The specification includes a normative reference to
 * <a href="https://www.unicode.org/Public/3.1-Update/UnicodeCharacterDatabase-3.1.0.html">version 3.1.0 of the Unicode Character Database</a>.
 * To comply with the specification, version 3.1.0 must be supported. However, the recommendation that implementors also support future
 * versions introduces a conflict, as different versions of the Unicode Database may assign different properties to the same characters.
 * This conflict was discussed in <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=5818">Bug 5818</a>, which led to refinements in the
 * <a href="https://www.w3.org/TR/xmlschema11-2/#datatypes">W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes</a> specification.
 * However, these clarifications were not incorporated into the XSD 1.0 specification, which {@link XQuerySqlRegex} adheres to.
 * <p>
 * Given the above considerations, the safest option is to strictly adhere to version 3.1.0 of the Unicode Character Database.
 * However, the default encodings provided by jcodings follow newer versions of the database. This class provides support for version 3.1.0.
 * Additionally, it introduces several code point ranges defined specifically in the XSD 1.0 specification.
 * These ranges are not directly represented in regular expression syntax; instead, they are indirectly referenced by multi-character
 * escapes (e.g., <code>\c</code> maps to <code>NameChar</code>, and <code>\i</code> maps to <code>InitialNameChar</code>).
 */
final class XQuerySqlEncoding
        extends Encoding
{
    public static final XQuerySqlEncoding INSTANCE = new XQuerySqlEncoding();

    private static final BytesHash<Integer> CHARACTER_PROPERTY_TO_TYPE_MAP;
    // When normal UTF-8 encoding (instead of non-strict UTF-8) is used, Joni can enter an infinite loop if an invalid UTF-8 slice is provided.
    private static final Encoding DELEGATE = NonStrictUTF8Encoding.INSTANCE;

    static {
        CHARACTER_PROPERTY_TO_TYPE_MAP = new BytesHash<>();
        for (int i = 0; i < CodePointSetTable.getSize(); i++) {
            CHARACTER_PROPERTY_TO_TYPE_MAP.putDirect(CodePointSetTable.getName(i), resolveCharacterType(i));
        }
    }

    private XQuerySqlEncoding()
    {
        super(NonStrictUTF8Encoding.INSTANCE.getCharsetName(),
                NonStrictUTF8Encoding.INSTANCE.minLength(),
                NonStrictUTF8Encoding.INSTANCE.maxLength(),
                NonStrictUTF8Encoding.INSTANCE.isDummy());
    }

    @Override
    public Charset getCharset()
    {
        return DELEGATE.getCharset();
    }

    @Override
    public String getCharsetName()
    {
        return DELEGATE.getCharsetName();
    }

    @Override
    public Encoding replicate(byte[] name)
    {
        return DELEGATE.replicate(name);
    }

    @Override
    public Encoding replicate(byte[] name, boolean dummy)
    {
        return DELEGATE.replicate(name, dummy);
    }

    @Override
    public int length(byte characterHead)
    {
        return DELEGATE.length(characterHead);
    }

    @Override
    public int length(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.length(bytes, startOffset, endOffset);
    }

    @Override
    public boolean isNewLine(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.isNewLine(bytes, startOffset, endOffset);
    }

    @Override
    public int mbcToCode(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.mbcToCode(bytes, startOffset, endOffset);
    }

    @Override
    public int codeToMbcLength(int code)
    {
        return DELEGATE.codeToMbcLength(code);
    }

    @Override
    public int codeToMbc(int code, byte[] bytes, int startOffset)
    {
        return DELEGATE.codeToMbc(code, bytes, startOffset);
    }

    @Override
    public int mbcCaseFold(int flag, byte[] input, IntHolder characterHeadOffset, int endOffset, byte[] output)
    {
        return DELEGATE.mbcCaseFold(flag, input, characterHeadOffset, endOffset, output);
    }

    @Override
    public byte[] toLowerCaseTable()
    {
        return DELEGATE.toLowerCaseTable();
    }

    @Override
    public void applyAllCaseFold(int flag, ApplyAllCaseFoldFunction foldingFunction, Object argument)
    {
        DELEGATE.applyAllCaseFold(flag, foldingFunction, argument);
    }

    @Override
    public CaseFoldCodeItem[] caseFoldCodesByString(int flag, byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.caseFoldCodesByString(flag, bytes, startOffset, endOffset);
    }

    @Override
    public int propertyNameToCType(byte[] bytes, int startOffset, int endOffset)
    {
        Integer characterType = CHARACTER_PROPERTY_TO_TYPE_MAP.get(bytes, startOffset, endOffset);
        if (characterType == null) {
            throw new CharacterPropertyException(ERR_INVALID_CHAR_PROPERTY_NAME, name, startOffset, endOffset);
        }
        return characterType;
    }

    @Override
    public boolean isCodeCType(int code, int characterType)
    {
        if (code < 0) {
            return false;
        }
        if (isStandardCharacterType(characterType)) {
            return DELEGATE.isCodeCType(code, characterType);
        }
        int index = resolveCodePointSetIndex(characterType);
        return CodeRange.isInCodeRange(CodePointSetTable.getRanges(index), code);
    }

    @Override
    public int[] ctypeCodeRange(int characterType, IntHolder minMultiByteCodePoint)
    {
        if (isStandardCharacterType(characterType)) {
            return DELEGATE.ctypeCodeRange(characterType, minMultiByteCodePoint);
        }
        minMultiByteCodePoint.value = 128;
        int index = resolveCodePointSetIndex(characterType);
        return CodePointSetTable.getRanges(index);
    }

    public static boolean isPublicCharacterProperty(String property)
    {
        byte[] bytes = property.getBytes(UTF_8);
        Integer characterType = CHARACTER_PROPERTY_TO_TYPE_MAP.get(bytes, 0, bytes.length);
        if (characterType == null) {
            return false;
        }
        int index = resolveCodePointSetIndex(characterType);
        return CodePointSetTable.isPublic(index);
    }

    private static boolean isStandardCharacterType(int characterType)
    {
        return characterType <= CharacterType.MAX_STD_CTYPE;
    }

    private static int resolveCodePointSetIndex(int characterType)
    {
        return characterType - CharacterType.MAX_STD_CTYPE - 1;
    }

    private static int resolveCharacterType(int setIndex)
    {
        return setIndex + CharacterType.MAX_STD_CTYPE + 1;
    }

    @Override
    public int leftAdjustCharHead(byte[] bytes, int startOffset, int currentOffset, int endOffset)
    {
        return DELEGATE.leftAdjustCharHead(bytes, startOffset, currentOffset, endOffset);
    }

    @Override
    public boolean isReverseMatchAllowed(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.isReverseMatchAllowed(bytes, startOffset, endOffset);
    }

    @Override
    public int strLength(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.strLength(bytes, startOffset, endOffset);
    }

    @Override
    public int strCodeAt(byte[] bytes, int startOffset, int endOffset, int index)
    {
        return DELEGATE.strCodeAt(bytes, startOffset, endOffset, index);
    }

    @Override
    public boolean isMbcCrnl(byte[] bytes, int startOffset, int endOffset)
    {
        return DELEGATE.isMbcCrnl(bytes, startOffset, endOffset);
    }

    private static final class CodePointSetTable
    {
        private static final CodePointSet CONTROL_CHARACTERS = publicCodePointSet("Cc",
                0x000000, 0x00001F, 0x00007F, 0x00009F);
        private static final CodePointSet FORMAT_CHARACTERS = publicCodePointSet("Cf",
                0x00070F, 0x00070F, 0x00180B, 0x00180E, 0x00200C, 0x00200F, 0x00202A, 0x00202E,
                0x00206A, 0x00206F, 0x00FEFF, 0x00FEFF, 0x00FFF9, 0x00FFFB, 0x01D173, 0x01D17A,
                0x0E0001, 0x0E0001, 0x0E0020, 0x0E007F);
        private static final CodePointSet PRIVATE_USE = publicCodePointSet("Co",
                0x00E000, 0x00E000, 0x00F8FF, 0x00F8FF, 0x0F0000, 0x0F0000, 0x0FFFFD, 0x0FFFFD,
                0x100000, 0x100000, 0x10FFFD, 0x10FFFD);
        private static final CodePointSet LOWERCASE_LETTERS = publicCodePointSet("Ll",
                0x000061, 0x00007A, 0x0000AA, 0x0000AA, 0x0000B5, 0x0000B5, 0x0000BA, 0x0000BA,
                0x0000DF, 0x0000F6, 0x0000F8, 0x0000FF, 0x000101, 0x000101, 0x000103, 0x000103,
                0x000105, 0x000105, 0x000107, 0x000107, 0x000109, 0x000109, 0x00010B, 0x00010B,
                0x00010D, 0x00010D, 0x00010F, 0x00010F, 0x000111, 0x000111, 0x000113, 0x000113,
                0x000115, 0x000115, 0x000117, 0x000117, 0x000119, 0x000119, 0x00011B, 0x00011B,
                0x00011D, 0x00011D, 0x00011F, 0x00011F, 0x000121, 0x000121, 0x000123, 0x000123,
                0x000125, 0x000125, 0x000127, 0x000127, 0x000129, 0x000129, 0x00012B, 0x00012B,
                0x00012D, 0x00012D, 0x00012F, 0x00012F, 0x000131, 0x000131, 0x000133, 0x000133,
                0x000135, 0x000135, 0x000137, 0x000138, 0x00013A, 0x00013A, 0x00013C, 0x00013C,
                0x00013E, 0x00013E, 0x000140, 0x000140, 0x000142, 0x000142, 0x000144, 0x000144,
                0x000146, 0x000146, 0x000148, 0x000149, 0x00014B, 0x00014B, 0x00014D, 0x00014D,
                0x00014F, 0x00014F, 0x000151, 0x000151, 0x000153, 0x000153, 0x000155, 0x000155,
                0x000157, 0x000157, 0x000159, 0x000159, 0x00015B, 0x00015B, 0x00015D, 0x00015D,
                0x00015F, 0x00015F, 0x000161, 0x000161, 0x000163, 0x000163, 0x000165, 0x000165,
                0x000167, 0x000167, 0x000169, 0x000169, 0x00016B, 0x00016B, 0x00016D, 0x00016D,
                0x00016F, 0x00016F, 0x000171, 0x000171, 0x000173, 0x000173, 0x000175, 0x000175,
                0x000177, 0x000177, 0x00017A, 0x00017A, 0x00017C, 0x00017C, 0x00017E, 0x000180,
                0x000183, 0x000183, 0x000185, 0x000185, 0x000188, 0x000188, 0x00018C, 0x00018D,
                0x000192, 0x000192, 0x000195, 0x000195, 0x000199, 0x00019B, 0x00019E, 0x00019E,
                0x0001A1, 0x0001A1, 0x0001A3, 0x0001A3, 0x0001A5, 0x0001A5, 0x0001A8, 0x0001A8,
                0x0001AA, 0x0001AB, 0x0001AD, 0x0001AD, 0x0001B0, 0x0001B0, 0x0001B4, 0x0001B4,
                0x0001B6, 0x0001B6, 0x0001B9, 0x0001BA, 0x0001BD, 0x0001BF, 0x0001C6, 0x0001C6,
                0x0001C9, 0x0001C9, 0x0001CC, 0x0001CC, 0x0001CE, 0x0001CE, 0x0001D0, 0x0001D0,
                0x0001D2, 0x0001D2, 0x0001D4, 0x0001D4, 0x0001D6, 0x0001D6, 0x0001D8, 0x0001D8,
                0x0001DA, 0x0001DA, 0x0001DC, 0x0001DD, 0x0001DF, 0x0001DF, 0x0001E1, 0x0001E1,
                0x0001E3, 0x0001E3, 0x0001E5, 0x0001E5, 0x0001E7, 0x0001E7, 0x0001E9, 0x0001E9,
                0x0001EB, 0x0001EB, 0x0001ED, 0x0001ED, 0x0001EF, 0x0001F0, 0x0001F3, 0x0001F3,
                0x0001F5, 0x0001F5, 0x0001F9, 0x0001F9, 0x0001FB, 0x0001FB, 0x0001FD, 0x0001FD,
                0x0001FF, 0x0001FF, 0x000201, 0x000201, 0x000203, 0x000203, 0x000205, 0x000205,
                0x000207, 0x000207, 0x000209, 0x000209, 0x00020B, 0x00020B, 0x00020D, 0x00020D,
                0x00020F, 0x00020F, 0x000211, 0x000211, 0x000213, 0x000213, 0x000215, 0x000215,
                0x000217, 0x000217, 0x000219, 0x000219, 0x00021B, 0x00021B, 0x00021D, 0x00021D,
                0x00021F, 0x00021F, 0x000223, 0x000223, 0x000225, 0x000225, 0x000227, 0x000227,
                0x000229, 0x000229, 0x00022B, 0x00022B, 0x00022D, 0x00022D, 0x00022F, 0x00022F,
                0x000231, 0x000231, 0x000233, 0x000233, 0x000250, 0x0002AD, 0x000390, 0x000390,
                0x0003AC, 0x0003CE, 0x0003D0, 0x0003D1, 0x0003D5, 0x0003D7, 0x0003DB, 0x0003DB,
                0x0003DD, 0x0003DD, 0x0003DF, 0x0003DF, 0x0003E1, 0x0003E1, 0x0003E3, 0x0003E3,
                0x0003E5, 0x0003E5, 0x0003E7, 0x0003E7, 0x0003E9, 0x0003E9, 0x0003EB, 0x0003EB,
                0x0003ED, 0x0003ED, 0x0003EF, 0x0003F3, 0x0003F5, 0x0003F5, 0x000430, 0x00045F,
                0x000461, 0x000461, 0x000463, 0x000463, 0x000465, 0x000465, 0x000467, 0x000467,
                0x000469, 0x000469, 0x00046B, 0x00046B, 0x00046D, 0x00046D, 0x00046F, 0x00046F,
                0x000471, 0x000471, 0x000473, 0x000473, 0x000475, 0x000475, 0x000477, 0x000477,
                0x000479, 0x000479, 0x00047B, 0x00047B, 0x00047D, 0x00047D, 0x00047F, 0x00047F,
                0x000481, 0x000481, 0x00048D, 0x00048D, 0x00048F, 0x00048F, 0x000491, 0x000491,
                0x000493, 0x000493, 0x000495, 0x000495, 0x000497, 0x000497, 0x000499, 0x000499,
                0x00049B, 0x00049B, 0x00049D, 0x00049D, 0x00049F, 0x00049F, 0x0004A1, 0x0004A1,
                0x0004A3, 0x0004A3, 0x0004A5, 0x0004A5, 0x0004A7, 0x0004A7, 0x0004A9, 0x0004A9,
                0x0004AB, 0x0004AB, 0x0004AD, 0x0004AD, 0x0004AF, 0x0004AF, 0x0004B1, 0x0004B1,
                0x0004B3, 0x0004B3, 0x0004B5, 0x0004B5, 0x0004B7, 0x0004B7, 0x0004B9, 0x0004B9,
                0x0004BB, 0x0004BB, 0x0004BD, 0x0004BD, 0x0004BF, 0x0004BF, 0x0004C2, 0x0004C2,
                0x0004C4, 0x0004C4, 0x0004C8, 0x0004C8, 0x0004CC, 0x0004CC, 0x0004D1, 0x0004D1,
                0x0004D3, 0x0004D3, 0x0004D5, 0x0004D5, 0x0004D7, 0x0004D7, 0x0004D9, 0x0004D9,
                0x0004DB, 0x0004DB, 0x0004DD, 0x0004DD, 0x0004DF, 0x0004DF, 0x0004E1, 0x0004E1,
                0x0004E3, 0x0004E3, 0x0004E5, 0x0004E5, 0x0004E7, 0x0004E7, 0x0004E9, 0x0004E9,
                0x0004EB, 0x0004EB, 0x0004ED, 0x0004ED, 0x0004EF, 0x0004EF, 0x0004F1, 0x0004F1,
                0x0004F3, 0x0004F3, 0x0004F5, 0x0004F5, 0x0004F9, 0x0004F9, 0x000561, 0x000587,
                0x001E01, 0x001E01, 0x001E03, 0x001E03, 0x001E05, 0x001E05, 0x001E07, 0x001E07,
                0x001E09, 0x001E09, 0x001E0B, 0x001E0B, 0x001E0D, 0x001E0D, 0x001E0F, 0x001E0F,
                0x001E11, 0x001E11, 0x001E13, 0x001E13, 0x001E15, 0x001E15, 0x001E17, 0x001E17,
                0x001E19, 0x001E19, 0x001E1B, 0x001E1B, 0x001E1D, 0x001E1D, 0x001E1F, 0x001E1F,
                0x001E21, 0x001E21, 0x001E23, 0x001E23, 0x001E25, 0x001E25, 0x001E27, 0x001E27,
                0x001E29, 0x001E29, 0x001E2B, 0x001E2B, 0x001E2D, 0x001E2D, 0x001E2F, 0x001E2F,
                0x001E31, 0x001E31, 0x001E33, 0x001E33, 0x001E35, 0x001E35, 0x001E37, 0x001E37,
                0x001E39, 0x001E39, 0x001E3B, 0x001E3B, 0x001E3D, 0x001E3D, 0x001E3F, 0x001E3F,
                0x001E41, 0x001E41, 0x001E43, 0x001E43, 0x001E45, 0x001E45, 0x001E47, 0x001E47,
                0x001E49, 0x001E49, 0x001E4B, 0x001E4B, 0x001E4D, 0x001E4D, 0x001E4F, 0x001E4F,
                0x001E51, 0x001E51, 0x001E53, 0x001E53, 0x001E55, 0x001E55, 0x001E57, 0x001E57,
                0x001E59, 0x001E59, 0x001E5B, 0x001E5B, 0x001E5D, 0x001E5D, 0x001E5F, 0x001E5F,
                0x001E61, 0x001E61, 0x001E63, 0x001E63, 0x001E65, 0x001E65, 0x001E67, 0x001E67,
                0x001E69, 0x001E69, 0x001E6B, 0x001E6B, 0x001E6D, 0x001E6D, 0x001E6F, 0x001E6F,
                0x001E71, 0x001E71, 0x001E73, 0x001E73, 0x001E75, 0x001E75, 0x001E77, 0x001E77,
                0x001E79, 0x001E79, 0x001E7B, 0x001E7B, 0x001E7D, 0x001E7D, 0x001E7F, 0x001E7F,
                0x001E81, 0x001E81, 0x001E83, 0x001E83, 0x001E85, 0x001E85, 0x001E87, 0x001E87,
                0x001E89, 0x001E89, 0x001E8B, 0x001E8B, 0x001E8D, 0x001E8D, 0x001E8F, 0x001E8F,
                0x001E91, 0x001E91, 0x001E93, 0x001E93, 0x001E95, 0x001E9B, 0x001EA1, 0x001EA1,
                0x001EA3, 0x001EA3, 0x001EA5, 0x001EA5, 0x001EA7, 0x001EA7, 0x001EA9, 0x001EA9,
                0x001EAB, 0x001EAB, 0x001EAD, 0x001EAD, 0x001EAF, 0x001EAF, 0x001EB1, 0x001EB1,
                0x001EB3, 0x001EB3, 0x001EB5, 0x001EB5, 0x001EB7, 0x001EB7, 0x001EB9, 0x001EB9,
                0x001EBB, 0x001EBB, 0x001EBD, 0x001EBD, 0x001EBF, 0x001EBF, 0x001EC1, 0x001EC1,
                0x001EC3, 0x001EC3, 0x001EC5, 0x001EC5, 0x001EC7, 0x001EC7, 0x001EC9, 0x001EC9,
                0x001ECB, 0x001ECB, 0x001ECD, 0x001ECD, 0x001ECF, 0x001ECF, 0x001ED1, 0x001ED1,
                0x001ED3, 0x001ED3, 0x001ED5, 0x001ED5, 0x001ED7, 0x001ED7, 0x001ED9, 0x001ED9,
                0x001EDB, 0x001EDB, 0x001EDD, 0x001EDD, 0x001EDF, 0x001EDF, 0x001EE1, 0x001EE1,
                0x001EE3, 0x001EE3, 0x001EE5, 0x001EE5, 0x001EE7, 0x001EE7, 0x001EE9, 0x001EE9,
                0x001EEB, 0x001EEB, 0x001EED, 0x001EED, 0x001EEF, 0x001EEF, 0x001EF1, 0x001EF1,
                0x001EF3, 0x001EF3, 0x001EF5, 0x001EF5, 0x001EF7, 0x001EF7, 0x001EF9, 0x001EF9,
                0x001F00, 0x001F07, 0x001F10, 0x001F15, 0x001F20, 0x001F27, 0x001F30, 0x001F37,
                0x001F40, 0x001F45, 0x001F50, 0x001F57, 0x001F60, 0x001F67, 0x001F70, 0x001F7D,
                0x001F80, 0x001F87, 0x001F90, 0x001F97, 0x001FA0, 0x001FA7, 0x001FB0, 0x001FB4,
                0x001FB6, 0x001FB7, 0x001FBE, 0x001FBE, 0x001FC2, 0x001FC4, 0x001FC6, 0x001FC7,
                0x001FD0, 0x001FD3, 0x001FD6, 0x001FD7, 0x001FE0, 0x001FE7, 0x001FF2, 0x001FF4,
                0x001FF6, 0x001FF7, 0x00207F, 0x00207F, 0x00210A, 0x00210A, 0x00210E, 0x00210F,
                0x002113, 0x002113, 0x00212F, 0x00212F, 0x002134, 0x002134, 0x002139, 0x002139,
                0x00FB00, 0x00FB06, 0x00FB13, 0x00FB17, 0x00FF41, 0x00FF5A, 0x010428, 0x01044D,
                0x01D41A, 0x01D433, 0x01D44E, 0x01D454, 0x01D456, 0x01D467, 0x01D482, 0x01D49B,
                0x01D4B6, 0x01D4B9, 0x01D4BB, 0x01D4BB, 0x01D4BD, 0x01D4C0, 0x01D4C2, 0x01D4C3,
                0x01D4C5, 0x01D4CF, 0x01D4EA, 0x01D503, 0x01D51E, 0x01D537, 0x01D552, 0x01D56B,
                0x01D586, 0x01D59F, 0x01D5BA, 0x01D5D3, 0x01D5EE, 0x01D607, 0x01D622, 0x01D63B,
                0x01D656, 0x01D66F, 0x01D68A, 0x01D6A3, 0x01D6C2, 0x01D6DA, 0x01D6DC, 0x01D6E1,
                0x01D6FC, 0x01D714, 0x01D716, 0x01D71B, 0x01D736, 0x01D74E, 0x01D750, 0x01D755,
                0x01D770, 0x01D788, 0x01D78A, 0x01D78F, 0x01D7AA, 0x01D7C2, 0x01D7C4, 0x01D7C9);
        private static final CodePointSet MODIFIER_LETTERS = publicCodePointSet("Lm",
                0x0002B0, 0x0002B8, 0x0002BB, 0x0002C1, 0x0002D0, 0x0002D1, 0x0002E0, 0x0002E4,
                0x0002EE, 0x0002EE, 0x00037A, 0x00037A, 0x000559, 0x000559, 0x000640, 0x000640,
                0x0006E5, 0x0006E6, 0x000E46, 0x000E46, 0x000EC6, 0x000EC6, 0x001843, 0x001843,
                0x003005, 0x003005, 0x003031, 0x003035, 0x00309D, 0x00309E, 0x0030FC, 0x0030FE,
                0x00FF70, 0x00FF70, 0x00FF9E, 0x00FF9F);
        private static final CodePointSet OTHER_LETTERS = publicCodePointSet("Lo",
                0x0001BB, 0x0001BB, 0x0001C0, 0x0001C3, 0x0005D0, 0x0005EA, 0x0005F0, 0x0005F2,
                0x000621, 0x00063A, 0x000641, 0x00064A, 0x000671, 0x0006D3, 0x0006D5, 0x0006D5,
                0x0006FA, 0x0006FC, 0x000710, 0x000710, 0x000712, 0x00072C, 0x000780, 0x0007A5,
                0x000905, 0x000939, 0x00093D, 0x00093D, 0x000950, 0x000950, 0x000958, 0x000961,
                0x000985, 0x00098C, 0x00098F, 0x000990, 0x000993, 0x0009A8, 0x0009AA, 0x0009B0,
                0x0009B2, 0x0009B2, 0x0009B6, 0x0009B9, 0x0009DC, 0x0009DD, 0x0009DF, 0x0009E1,
                0x0009F0, 0x0009F1, 0x000A05, 0x000A0A, 0x000A0F, 0x000A10, 0x000A13, 0x000A28,
                0x000A2A, 0x000A30, 0x000A32, 0x000A33, 0x000A35, 0x000A36, 0x000A38, 0x000A39,
                0x000A59, 0x000A5C, 0x000A5E, 0x000A5E, 0x000A72, 0x000A74, 0x000A85, 0x000A8B,
                0x000A8D, 0x000A8D, 0x000A8F, 0x000A91, 0x000A93, 0x000AA8, 0x000AAA, 0x000AB0,
                0x000AB2, 0x000AB3, 0x000AB5, 0x000AB9, 0x000ABD, 0x000ABD, 0x000AD0, 0x000AD0,
                0x000AE0, 0x000AE0, 0x000B05, 0x000B0C, 0x000B0F, 0x000B10, 0x000B13, 0x000B28,
                0x000B2A, 0x000B30, 0x000B32, 0x000B33, 0x000B36, 0x000B39, 0x000B3D, 0x000B3D,
                0x000B5C, 0x000B5D, 0x000B5F, 0x000B61, 0x000B85, 0x000B8A, 0x000B8E, 0x000B90,
                0x000B92, 0x000B95, 0x000B99, 0x000B9A, 0x000B9C, 0x000B9C, 0x000B9E, 0x000B9F,
                0x000BA3, 0x000BA4, 0x000BA8, 0x000BAA, 0x000BAE, 0x000BB5, 0x000BB7, 0x000BB9,
                0x000C05, 0x000C0C, 0x000C0E, 0x000C10, 0x000C12, 0x000C28, 0x000C2A, 0x000C33,
                0x000C35, 0x000C39, 0x000C60, 0x000C61, 0x000C85, 0x000C8C, 0x000C8E, 0x000C90,
                0x000C92, 0x000CA8, 0x000CAA, 0x000CB3, 0x000CB5, 0x000CB9, 0x000CDE, 0x000CDE,
                0x000CE0, 0x000CE1, 0x000D05, 0x000D0C, 0x000D0E, 0x000D10, 0x000D12, 0x000D28,
                0x000D2A, 0x000D39, 0x000D60, 0x000D61, 0x000D85, 0x000D96, 0x000D9A, 0x000DB1,
                0x000DB3, 0x000DBB, 0x000DBD, 0x000DBD, 0x000DC0, 0x000DC6, 0x000E01, 0x000E30,
                0x000E32, 0x000E33, 0x000E40, 0x000E45, 0x000E81, 0x000E82, 0x000E84, 0x000E84,
                0x000E87, 0x000E88, 0x000E8A, 0x000E8A, 0x000E8D, 0x000E8D, 0x000E94, 0x000E97,
                0x000E99, 0x000E9F, 0x000EA1, 0x000EA3, 0x000EA5, 0x000EA5, 0x000EA7, 0x000EA7,
                0x000EAA, 0x000EAB, 0x000EAD, 0x000EB0, 0x000EB2, 0x000EB3, 0x000EBD, 0x000EBD,
                0x000EC0, 0x000EC4, 0x000EDC, 0x000EDD, 0x000F00, 0x000F00, 0x000F40, 0x000F47,
                0x000F49, 0x000F6A, 0x000F88, 0x000F8B, 0x001000, 0x001021, 0x001023, 0x001027,
                0x001029, 0x00102A, 0x001050, 0x001055, 0x0010D0, 0x0010F6, 0x001100, 0x001159,
                0x00115F, 0x0011A2, 0x0011A8, 0x0011F9, 0x001200, 0x001206, 0x001208, 0x001246,
                0x001248, 0x001248, 0x00124A, 0x00124D, 0x001250, 0x001256, 0x001258, 0x001258,
                0x00125A, 0x00125D, 0x001260, 0x001286, 0x001288, 0x001288, 0x00128A, 0x00128D,
                0x001290, 0x0012AE, 0x0012B0, 0x0012B0, 0x0012B2, 0x0012B5, 0x0012B8, 0x0012BE,
                0x0012C0, 0x0012C0, 0x0012C2, 0x0012C5, 0x0012C8, 0x0012CE, 0x0012D0, 0x0012D6,
                0x0012D8, 0x0012EE, 0x0012F0, 0x00130E, 0x001310, 0x001310, 0x001312, 0x001315,
                0x001318, 0x00131E, 0x001320, 0x001346, 0x001348, 0x00135A, 0x0013A0, 0x0013F4,
                0x001401, 0x00166C, 0x00166F, 0x001676, 0x001681, 0x00169A, 0x0016A0, 0x0016EA,
                0x001780, 0x0017B3, 0x001820, 0x001842, 0x001844, 0x001877, 0x001880, 0x0018A8,
                0x002135, 0x002138, 0x003006, 0x003006, 0x003041, 0x003094, 0x0030A1, 0x0030FA,
                0x003105, 0x00312C, 0x003131, 0x00318E, 0x0031A0, 0x0031B7, 0x003400, 0x003400,
                0x004DB5, 0x004DB5, 0x004E00, 0x004E00, 0x009FA5, 0x009FA5, 0x00A000, 0x00A48C,
                0x00AC00, 0x00AC00, 0x00D7A3, 0x00D7A3, 0x00F900, 0x00FA2D, 0x00FB1D, 0x00FB1D,
                0x00FB1F, 0x00FB28, 0x00FB2A, 0x00FB36, 0x00FB38, 0x00FB3C, 0x00FB3E, 0x00FB3E,
                0x00FB40, 0x00FB41, 0x00FB43, 0x00FB44, 0x00FB46, 0x00FBB1, 0x00FBD3, 0x00FD3D,
                0x00FD50, 0x00FD8F, 0x00FD92, 0x00FDC7, 0x00FDF0, 0x00FDFB, 0x00FE70, 0x00FE72,
                0x00FE74, 0x00FE74, 0x00FE76, 0x00FEFC, 0x00FF66, 0x00FF6F, 0x00FF71, 0x00FF9D,
                0x00FFA0, 0x00FFBE, 0x00FFC2, 0x00FFC7, 0x00FFCA, 0x00FFCF, 0x00FFD2, 0x00FFD7,
                0x00FFDA, 0x00FFDC, 0x010300, 0x01031E, 0x010330, 0x010349, 0x020000, 0x020000,
                0x02A6D6, 0x02A6D6, 0x02F800, 0x02FA1D);
        private static final CodePointSet TITLECASE_LETTERS = publicCodePointSet("Lt",
                0x0001C5, 0x0001C5, 0x0001C8, 0x0001C8, 0x0001CB, 0x0001CB, 0x0001F2, 0x0001F2,
                0x001F88, 0x001F8F, 0x001F98, 0x001F9F, 0x001FA8, 0x001FAF, 0x001FBC, 0x001FBC,
                0x001FCC, 0x001FCC, 0x001FFC, 0x001FFC);
        private static final CodePointSet UPPERCASE_LETTERS = publicCodePointSet("Lu",
                0x000041, 0x00005A, 0x0000C0, 0x0000D6, 0x0000D8, 0x0000DE, 0x000100, 0x000100,
                0x000102, 0x000102, 0x000104, 0x000104, 0x000106, 0x000106, 0x000108, 0x000108,
                0x00010A, 0x00010A, 0x00010C, 0x00010C, 0x00010E, 0x00010E, 0x000110, 0x000110,
                0x000112, 0x000112, 0x000114, 0x000114, 0x000116, 0x000116, 0x000118, 0x000118,
                0x00011A, 0x00011A, 0x00011C, 0x00011C, 0x00011E, 0x00011E, 0x000120, 0x000120,
                0x000122, 0x000122, 0x000124, 0x000124, 0x000126, 0x000126, 0x000128, 0x000128,
                0x00012A, 0x00012A, 0x00012C, 0x00012C, 0x00012E, 0x00012E, 0x000130, 0x000130,
                0x000132, 0x000132, 0x000134, 0x000134, 0x000136, 0x000136, 0x000139, 0x000139,
                0x00013B, 0x00013B, 0x00013D, 0x00013D, 0x00013F, 0x00013F, 0x000141, 0x000141,
                0x000143, 0x000143, 0x000145, 0x000145, 0x000147, 0x000147, 0x00014A, 0x00014A,
                0x00014C, 0x00014C, 0x00014E, 0x00014E, 0x000150, 0x000150, 0x000152, 0x000152,
                0x000154, 0x000154, 0x000156, 0x000156, 0x000158, 0x000158, 0x00015A, 0x00015A,
                0x00015C, 0x00015C, 0x00015E, 0x00015E, 0x000160, 0x000160, 0x000162, 0x000162,
                0x000164, 0x000164, 0x000166, 0x000166, 0x000168, 0x000168, 0x00016A, 0x00016A,
                0x00016C, 0x00016C, 0x00016E, 0x00016E, 0x000170, 0x000170, 0x000172, 0x000172,
                0x000174, 0x000174, 0x000176, 0x000176, 0x000178, 0x000179, 0x00017B, 0x00017B,
                0x00017D, 0x00017D, 0x000181, 0x000182, 0x000184, 0x000184, 0x000186, 0x000187,
                0x000189, 0x00018B, 0x00018E, 0x000191, 0x000193, 0x000194, 0x000196, 0x000198,
                0x00019C, 0x00019D, 0x00019F, 0x0001A0, 0x0001A2, 0x0001A2, 0x0001A4, 0x0001A4,
                0x0001A6, 0x0001A7, 0x0001A9, 0x0001A9, 0x0001AC, 0x0001AC, 0x0001AE, 0x0001AF,
                0x0001B1, 0x0001B3, 0x0001B5, 0x0001B5, 0x0001B7, 0x0001B8, 0x0001BC, 0x0001BC,
                0x0001C4, 0x0001C4, 0x0001C7, 0x0001C7, 0x0001CA, 0x0001CA, 0x0001CD, 0x0001CD,
                0x0001CF, 0x0001CF, 0x0001D1, 0x0001D1, 0x0001D3, 0x0001D3, 0x0001D5, 0x0001D5,
                0x0001D7, 0x0001D7, 0x0001D9, 0x0001D9, 0x0001DB, 0x0001DB, 0x0001DE, 0x0001DE,
                0x0001E0, 0x0001E0, 0x0001E2, 0x0001E2, 0x0001E4, 0x0001E4, 0x0001E6, 0x0001E6,
                0x0001E8, 0x0001E8, 0x0001EA, 0x0001EA, 0x0001EC, 0x0001EC, 0x0001EE, 0x0001EE,
                0x0001F1, 0x0001F1, 0x0001F4, 0x0001F4, 0x0001F6, 0x0001F8, 0x0001FA, 0x0001FA,
                0x0001FC, 0x0001FC, 0x0001FE, 0x0001FE, 0x000200, 0x000200, 0x000202, 0x000202,
                0x000204, 0x000204, 0x000206, 0x000206, 0x000208, 0x000208, 0x00020A, 0x00020A,
                0x00020C, 0x00020C, 0x00020E, 0x00020E, 0x000210, 0x000210, 0x000212, 0x000212,
                0x000214, 0x000214, 0x000216, 0x000216, 0x000218, 0x000218, 0x00021A, 0x00021A,
                0x00021C, 0x00021C, 0x00021E, 0x00021E, 0x000222, 0x000222, 0x000224, 0x000224,
                0x000226, 0x000226, 0x000228, 0x000228, 0x00022A, 0x00022A, 0x00022C, 0x00022C,
                0x00022E, 0x00022E, 0x000230, 0x000230, 0x000232, 0x000232, 0x000386, 0x000386,
                0x000388, 0x00038A, 0x00038C, 0x00038C, 0x00038E, 0x00038F, 0x000391, 0x0003A1,
                0x0003A3, 0x0003AB, 0x0003D2, 0x0003D4, 0x0003DA, 0x0003DA, 0x0003DC, 0x0003DC,
                0x0003DE, 0x0003DE, 0x0003E0, 0x0003E0, 0x0003E2, 0x0003E2, 0x0003E4, 0x0003E4,
                0x0003E6, 0x0003E6, 0x0003E8, 0x0003E8, 0x0003EA, 0x0003EA, 0x0003EC, 0x0003EC,
                0x0003EE, 0x0003EE, 0x0003F4, 0x0003F4, 0x000400, 0x00042F, 0x000460, 0x000460,
                0x000462, 0x000462, 0x000464, 0x000464, 0x000466, 0x000466, 0x000468, 0x000468,
                0x00046A, 0x00046A, 0x00046C, 0x00046C, 0x00046E, 0x00046E, 0x000470, 0x000470,
                0x000472, 0x000472, 0x000474, 0x000474, 0x000476, 0x000476, 0x000478, 0x000478,
                0x00047A, 0x00047A, 0x00047C, 0x00047C, 0x00047E, 0x00047E, 0x000480, 0x000480,
                0x00048C, 0x00048C, 0x00048E, 0x00048E, 0x000490, 0x000490, 0x000492, 0x000492,
                0x000494, 0x000494, 0x000496, 0x000496, 0x000498, 0x000498, 0x00049A, 0x00049A,
                0x00049C, 0x00049C, 0x00049E, 0x00049E, 0x0004A0, 0x0004A0, 0x0004A2, 0x0004A2,
                0x0004A4, 0x0004A4, 0x0004A6, 0x0004A6, 0x0004A8, 0x0004A8, 0x0004AA, 0x0004AA,
                0x0004AC, 0x0004AC, 0x0004AE, 0x0004AE, 0x0004B0, 0x0004B0, 0x0004B2, 0x0004B2,
                0x0004B4, 0x0004B4, 0x0004B6, 0x0004B6, 0x0004B8, 0x0004B8, 0x0004BA, 0x0004BA,
                0x0004BC, 0x0004BC, 0x0004BE, 0x0004BE, 0x0004C0, 0x0004C1, 0x0004C3, 0x0004C3,
                0x0004C7, 0x0004C7, 0x0004CB, 0x0004CB, 0x0004D0, 0x0004D0, 0x0004D2, 0x0004D2,
                0x0004D4, 0x0004D4, 0x0004D6, 0x0004D6, 0x0004D8, 0x0004D8, 0x0004DA, 0x0004DA,
                0x0004DC, 0x0004DC, 0x0004DE, 0x0004DE, 0x0004E0, 0x0004E0, 0x0004E2, 0x0004E2,
                0x0004E4, 0x0004E4, 0x0004E6, 0x0004E6, 0x0004E8, 0x0004E8, 0x0004EA, 0x0004EA,
                0x0004EC, 0x0004EC, 0x0004EE, 0x0004EE, 0x0004F0, 0x0004F0, 0x0004F2, 0x0004F2,
                0x0004F4, 0x0004F4, 0x0004F8, 0x0004F8, 0x000531, 0x000556, 0x0010A0, 0x0010C5,
                0x001E00, 0x001E00, 0x001E02, 0x001E02, 0x001E04, 0x001E04, 0x001E06, 0x001E06,
                0x001E08, 0x001E08, 0x001E0A, 0x001E0A, 0x001E0C, 0x001E0C, 0x001E0E, 0x001E0E,
                0x001E10, 0x001E10, 0x001E12, 0x001E12, 0x001E14, 0x001E14, 0x001E16, 0x001E16,
                0x001E18, 0x001E18, 0x001E1A, 0x001E1A, 0x001E1C, 0x001E1C, 0x001E1E, 0x001E1E,
                0x001E20, 0x001E20, 0x001E22, 0x001E22, 0x001E24, 0x001E24, 0x001E26, 0x001E26,
                0x001E28, 0x001E28, 0x001E2A, 0x001E2A, 0x001E2C, 0x001E2C, 0x001E2E, 0x001E2E,
                0x001E30, 0x001E30, 0x001E32, 0x001E32, 0x001E34, 0x001E34, 0x001E36, 0x001E36,
                0x001E38, 0x001E38, 0x001E3A, 0x001E3A, 0x001E3C, 0x001E3C, 0x001E3E, 0x001E3E,
                0x001E40, 0x001E40, 0x001E42, 0x001E42, 0x001E44, 0x001E44, 0x001E46, 0x001E46,
                0x001E48, 0x001E48, 0x001E4A, 0x001E4A, 0x001E4C, 0x001E4C, 0x001E4E, 0x001E4E,
                0x001E50, 0x001E50, 0x001E52, 0x001E52, 0x001E54, 0x001E54, 0x001E56, 0x001E56,
                0x001E58, 0x001E58, 0x001E5A, 0x001E5A, 0x001E5C, 0x001E5C, 0x001E5E, 0x001E5E,
                0x001E60, 0x001E60, 0x001E62, 0x001E62, 0x001E64, 0x001E64, 0x001E66, 0x001E66,
                0x001E68, 0x001E68, 0x001E6A, 0x001E6A, 0x001E6C, 0x001E6C, 0x001E6E, 0x001E6E,
                0x001E70, 0x001E70, 0x001E72, 0x001E72, 0x001E74, 0x001E74, 0x001E76, 0x001E76,
                0x001E78, 0x001E78, 0x001E7A, 0x001E7A, 0x001E7C, 0x001E7C, 0x001E7E, 0x001E7E,
                0x001E80, 0x001E80, 0x001E82, 0x001E82, 0x001E84, 0x001E84, 0x001E86, 0x001E86,
                0x001E88, 0x001E88, 0x001E8A, 0x001E8A, 0x001E8C, 0x001E8C, 0x001E8E, 0x001E8E,
                0x001E90, 0x001E90, 0x001E92, 0x001E92, 0x001E94, 0x001E94, 0x001EA0, 0x001EA0,
                0x001EA2, 0x001EA2, 0x001EA4, 0x001EA4, 0x001EA6, 0x001EA6, 0x001EA8, 0x001EA8,
                0x001EAA, 0x001EAA, 0x001EAC, 0x001EAC, 0x001EAE, 0x001EAE, 0x001EB0, 0x001EB0,
                0x001EB2, 0x001EB2, 0x001EB4, 0x001EB4, 0x001EB6, 0x001EB6, 0x001EB8, 0x001EB8,
                0x001EBA, 0x001EBA, 0x001EBC, 0x001EBC, 0x001EBE, 0x001EBE, 0x001EC0, 0x001EC0,
                0x001EC2, 0x001EC2, 0x001EC4, 0x001EC4, 0x001EC6, 0x001EC6, 0x001EC8, 0x001EC8,
                0x001ECA, 0x001ECA, 0x001ECC, 0x001ECC, 0x001ECE, 0x001ECE, 0x001ED0, 0x001ED0,
                0x001ED2, 0x001ED2, 0x001ED4, 0x001ED4, 0x001ED6, 0x001ED6, 0x001ED8, 0x001ED8,
                0x001EDA, 0x001EDA, 0x001EDC, 0x001EDC, 0x001EDE, 0x001EDE, 0x001EE0, 0x001EE0,
                0x001EE2, 0x001EE2, 0x001EE4, 0x001EE4, 0x001EE6, 0x001EE6, 0x001EE8, 0x001EE8,
                0x001EEA, 0x001EEA, 0x001EEC, 0x001EEC, 0x001EEE, 0x001EEE, 0x001EF0, 0x001EF0,
                0x001EF2, 0x001EF2, 0x001EF4, 0x001EF4, 0x001EF6, 0x001EF6, 0x001EF8, 0x001EF8,
                0x001F08, 0x001F0F, 0x001F18, 0x001F1D, 0x001F28, 0x001F2F, 0x001F38, 0x001F3F,
                0x001F48, 0x001F4D, 0x001F59, 0x001F59, 0x001F5B, 0x001F5B, 0x001F5D, 0x001F5D,
                0x001F5F, 0x001F5F, 0x001F68, 0x001F6F, 0x001FB8, 0x001FBB, 0x001FC8, 0x001FCB,
                0x001FD8, 0x001FDB, 0x001FE8, 0x001FEC, 0x001FF8, 0x001FFB, 0x002102, 0x002102,
                0x002107, 0x002107, 0x00210B, 0x00210D, 0x002110, 0x002112, 0x002115, 0x002115,
                0x002119, 0x00211D, 0x002124, 0x002124, 0x002126, 0x002126, 0x002128, 0x002128,
                0x00212A, 0x00212D, 0x002130, 0x002131, 0x002133, 0x002133, 0x00FF21, 0x00FF3A,
                0x010400, 0x010425, 0x01D400, 0x01D419, 0x01D434, 0x01D44D, 0x01D468, 0x01D481,
                0x01D49C, 0x01D49C, 0x01D49E, 0x01D49F, 0x01D4A2, 0x01D4A2, 0x01D4A5, 0x01D4A6,
                0x01D4A9, 0x01D4AC, 0x01D4AE, 0x01D4B5, 0x01D4D0, 0x01D4E9, 0x01D504, 0x01D505,
                0x01D507, 0x01D50A, 0x01D50D, 0x01D514, 0x01D516, 0x01D51C, 0x01D538, 0x01D539,
                0x01D53B, 0x01D53E, 0x01D540, 0x01D544, 0x01D546, 0x01D546, 0x01D54A, 0x01D550,
                0x01D56C, 0x01D585, 0x01D5A0, 0x01D5B9, 0x01D5D4, 0x01D5ED, 0x01D608, 0x01D621,
                0x01D63C, 0x01D655, 0x01D670, 0x01D689, 0x01D6A8, 0x01D6C0, 0x01D6E2, 0x01D6FA,
                0x01D71C, 0x01D734, 0x01D756, 0x01D76E, 0x01D790, 0x01D7A8);
        private static final CodePointSet SPACING_COMBINING_MARKS = publicCodePointSet("Mc",
                0x000903, 0x000903, 0x00093E, 0x000940, 0x000949, 0x00094C, 0x000982, 0x000983,
                0x0009BE, 0x0009C0, 0x0009C7, 0x0009C8, 0x0009CB, 0x0009CC, 0x0009D7, 0x0009D7,
                0x000A3E, 0x000A40, 0x000A83, 0x000A83, 0x000ABE, 0x000AC0, 0x000AC9, 0x000AC9,
                0x000ACB, 0x000ACC, 0x000B02, 0x000B03, 0x000B3E, 0x000B3E, 0x000B40, 0x000B40,
                0x000B47, 0x000B48, 0x000B4B, 0x000B4C, 0x000B57, 0x000B57, 0x000B83, 0x000B83,
                0x000BBE, 0x000BBF, 0x000BC1, 0x000BC2, 0x000BC6, 0x000BC8, 0x000BCA, 0x000BCC,
                0x000BD7, 0x000BD7, 0x000C01, 0x000C03, 0x000C41, 0x000C44, 0x000C82, 0x000C83,
                0x000CBE, 0x000CBE, 0x000CC0, 0x000CC4, 0x000CC7, 0x000CC8, 0x000CCA, 0x000CCB,
                0x000CD5, 0x000CD6, 0x000D02, 0x000D03, 0x000D3E, 0x000D40, 0x000D46, 0x000D48,
                0x000D4A, 0x000D4C, 0x000D57, 0x000D57, 0x000D82, 0x000D83, 0x000DCF, 0x000DD1,
                0x000DD8, 0x000DDF, 0x000DF2, 0x000DF3, 0x000F3E, 0x000F3F, 0x000F7F, 0x000F7F,
                0x00102C, 0x00102C, 0x001031, 0x001031, 0x001038, 0x001038, 0x001056, 0x001057,
                0x0017B4, 0x0017B6, 0x0017BE, 0x0017C5, 0x0017C7, 0x0017C8, 0x01D165, 0x01D166,
                0x01D16D, 0x01D172);
        private static final CodePointSet ENCLOSING_MARKS = publicCodePointSet("Me",
                0x000488, 0x000489, 0x0006DD, 0x0006DE, 0x0020DD, 0x0020E0, 0x0020E2, 0x0020E3);
        private static final CodePointSet NONSPACING_MARKS = publicCodePointSet("Mn",
                0x000300, 0x00034E, 0x000360, 0x000362, 0x000483, 0x000486, 0x000591, 0x0005A1,
                0x0005A3, 0x0005B9, 0x0005BB, 0x0005BD, 0x0005BF, 0x0005BF, 0x0005C1, 0x0005C2,
                0x0005C4, 0x0005C4, 0x00064B, 0x000655, 0x000670, 0x000670, 0x0006D6, 0x0006DC,
                0x0006DF, 0x0006E4, 0x0006E7, 0x0006E8, 0x0006EA, 0x0006ED, 0x000711, 0x000711,
                0x000730, 0x00074A, 0x0007A6, 0x0007B0, 0x000901, 0x000902, 0x00093C, 0x00093C,
                0x000941, 0x000948, 0x00094D, 0x00094D, 0x000951, 0x000954, 0x000962, 0x000963,
                0x000981, 0x000981, 0x0009BC, 0x0009BC, 0x0009C1, 0x0009C4, 0x0009CD, 0x0009CD,
                0x0009E2, 0x0009E3, 0x000A02, 0x000A02, 0x000A3C, 0x000A3C, 0x000A41, 0x000A42,
                0x000A47, 0x000A48, 0x000A4B, 0x000A4D, 0x000A70, 0x000A71, 0x000A81, 0x000A82,
                0x000ABC, 0x000ABC, 0x000AC1, 0x000AC5, 0x000AC7, 0x000AC8, 0x000ACD, 0x000ACD,
                0x000B01, 0x000B01, 0x000B3C, 0x000B3C, 0x000B3F, 0x000B3F, 0x000B41, 0x000B43,
                0x000B4D, 0x000B4D, 0x000B56, 0x000B56, 0x000B82, 0x000B82, 0x000BC0, 0x000BC0,
                0x000BCD, 0x000BCD, 0x000C3E, 0x000C40, 0x000C46, 0x000C48, 0x000C4A, 0x000C4D,
                0x000C55, 0x000C56, 0x000CBF, 0x000CBF, 0x000CC6, 0x000CC6, 0x000CCC, 0x000CCD,
                0x000D41, 0x000D43, 0x000D4D, 0x000D4D, 0x000DCA, 0x000DCA, 0x000DD2, 0x000DD4,
                0x000DD6, 0x000DD6, 0x000E31, 0x000E31, 0x000E34, 0x000E3A, 0x000E47, 0x000E4E,
                0x000EB1, 0x000EB1, 0x000EB4, 0x000EB9, 0x000EBB, 0x000EBC, 0x000EC8, 0x000ECD,
                0x000F18, 0x000F19, 0x000F35, 0x000F35, 0x000F37, 0x000F37, 0x000F39, 0x000F39,
                0x000F71, 0x000F7E, 0x000F80, 0x000F84, 0x000F86, 0x000F87, 0x000F90, 0x000F97,
                0x000F99, 0x000FBC, 0x000FC6, 0x000FC6, 0x00102D, 0x001030, 0x001032, 0x001032,
                0x001036, 0x001037, 0x001039, 0x001039, 0x001058, 0x001059, 0x0017B7, 0x0017BD,
                0x0017C6, 0x0017C6, 0x0017C9, 0x0017D3, 0x0018A9, 0x0018A9, 0x0020D0, 0x0020DC,
                0x0020E1, 0x0020E1, 0x00302A, 0x00302F, 0x003099, 0x00309A, 0x00FB1E, 0x00FB1E,
                0x00FE20, 0x00FE23, 0x01D167, 0x01D169, 0x01D17B, 0x01D182, 0x01D185, 0x01D18B,
                0x01D1AA, 0x01D1AD);
        private static final CodePointSet DECIMAL_DIGITS = publicCodePointSet("Nd",
                0x000030, 0x000039, 0x000660, 0x000669, 0x0006F0, 0x0006F9, 0x000966, 0x00096F,
                0x0009E6, 0x0009EF, 0x000A66, 0x000A6F, 0x000AE6, 0x000AEF, 0x000B66, 0x000B6F,
                0x000BE7, 0x000BEF, 0x000C66, 0x000C6F, 0x000CE6, 0x000CEF, 0x000D66, 0x000D6F,
                0x000E50, 0x000E59, 0x000ED0, 0x000ED9, 0x000F20, 0x000F29, 0x001040, 0x001049,
                0x001369, 0x001371, 0x0017E0, 0x0017E9, 0x001810, 0x001819, 0x00FF10, 0x00FF19,
                0x01D7CE, 0x01D7FF);
        private static final CodePointSet LETTER_NUMBERS = publicCodePointSet("Nl",
                0x0016EE, 0x0016F0, 0x002160, 0x002183, 0x003007, 0x003007, 0x003021, 0x003029,
                0x003038, 0x00303A, 0x01034A, 0x01034A);
        private static final CodePointSet OTHER_NUMBERS = publicCodePointSet("No",
                0x0000B2, 0x0000B3, 0x0000B9, 0x0000B9, 0x0000BC, 0x0000BE, 0x0009F4, 0x0009F9,
                0x000BF0, 0x000BF2, 0x000F2A, 0x000F33, 0x001372, 0x00137C, 0x002070, 0x002070,
                0x002074, 0x002079, 0x002080, 0x002089, 0x002153, 0x00215F, 0x002460, 0x00249B,
                0x0024EA, 0x0024EA, 0x002776, 0x002793, 0x003192, 0x003195, 0x003220, 0x003229,
                0x003280, 0x003289, 0x010320, 0x010323);
        private static final CodePointSet CONNECTOR_PUNCTUATION = publicCodePointSet("Pc",
                0x00005F, 0x00005F, 0x00203F, 0x002040, 0x0030FB, 0x0030FB, 0x00FE33, 0x00FE34,
                0x00FE4D, 0x00FE4F, 0x00FF3F, 0x00FF3F, 0x00FF65, 0x00FF65);
        private static final CodePointSet DASH_PUNCTUATION = publicCodePointSet("Pd",
                0x00002D, 0x00002D, 0x0000AD, 0x0000AD, 0x00058A, 0x00058A, 0x001806, 0x001806,
                0x002010, 0x002015, 0x00301C, 0x00301C, 0x003030, 0x003030, 0x00FE31, 0x00FE32,
                0x00FE58, 0x00FE58, 0x00FE63, 0x00FE63, 0x00FF0D, 0x00FF0D);
        private static final CodePointSet CLOSE_PUNCTUATION = publicCodePointSet("Pe",
                0x000029, 0x000029, 0x00005D, 0x00005D, 0x00007D, 0x00007D, 0x000F3B, 0x000F3B,
                0x000F3D, 0x000F3D, 0x00169C, 0x00169C, 0x002046, 0x002046, 0x00207E, 0x00207E,
                0x00208E, 0x00208E, 0x00232A, 0x00232A, 0x003009, 0x003009, 0x00300B, 0x00300B,
                0x00300D, 0x00300D, 0x00300F, 0x00300F, 0x003011, 0x003011, 0x003015, 0x003015,
                0x003017, 0x003017, 0x003019, 0x003019, 0x00301B, 0x00301B, 0x00301E, 0x00301F,
                0x00FD3F, 0x00FD3F, 0x00FE36, 0x00FE36, 0x00FE38, 0x00FE38, 0x00FE3A, 0x00FE3A,
                0x00FE3C, 0x00FE3C, 0x00FE3E, 0x00FE3E, 0x00FE40, 0x00FE40, 0x00FE42, 0x00FE42,
                0x00FE44, 0x00FE44, 0x00FE5A, 0x00FE5A, 0x00FE5C, 0x00FE5C, 0x00FE5E, 0x00FE5E,
                0x00FF09, 0x00FF09, 0x00FF3D, 0x00FF3D, 0x00FF5D, 0x00FF5D, 0x00FF63, 0x00FF63);
        private static final CodePointSet FINAL_QUOTE_PUNCTUATION = publicCodePointSet("Pf",
                0x0000BB, 0x0000BB, 0x002019, 0x002019, 0x00201D, 0x00201D, 0x00203A, 0x00203A);
        private static final CodePointSet INITIAL_QUOTE_PUNCTUATION = publicCodePointSet("Pi",
                0x0000AB, 0x0000AB, 0x002018, 0x002018, 0x00201B, 0x00201C, 0x00201F, 0x00201F,
                0x002039, 0x002039);
        private static final CodePointSet OTHER_PUNCTUATION = publicCodePointSet("Po",
                0x000021, 0x000023, 0x000025, 0x000027, 0x00002A, 0x00002A, 0x00002C, 0x00002C,
                0x00002E, 0x00002F, 0x00003A, 0x00003B, 0x00003F, 0x000040, 0x00005C, 0x00005C,
                0x0000A1, 0x0000A1, 0x0000B7, 0x0000B7, 0x0000BF, 0x0000BF, 0x00037E, 0x00037E,
                0x000387, 0x000387, 0x00055A, 0x00055F, 0x000589, 0x000589, 0x0005BE, 0x0005BE,
                0x0005C0, 0x0005C0, 0x0005C3, 0x0005C3, 0x0005F3, 0x0005F4, 0x00060C, 0x00060C,
                0x00061B, 0x00061B, 0x00061F, 0x00061F, 0x00066A, 0x00066D, 0x0006D4, 0x0006D4,
                0x000700, 0x00070D, 0x000964, 0x000965, 0x000970, 0x000970, 0x000DF4, 0x000DF4,
                0x000E4F, 0x000E4F, 0x000E5A, 0x000E5B, 0x000F04, 0x000F12, 0x000F85, 0x000F85,
                0x00104A, 0x00104F, 0x0010FB, 0x0010FB, 0x001361, 0x001368, 0x00166D, 0x00166E,
                0x0016EB, 0x0016ED, 0x0017D4, 0x0017DA, 0x0017DC, 0x0017DC, 0x001800, 0x001805,
                0x001807, 0x00180A, 0x002016, 0x002017, 0x002020, 0x002027, 0x002030, 0x002038,
                0x00203B, 0x00203E, 0x002041, 0x002043, 0x002048, 0x00204D, 0x003001, 0x003003,
                0x00FE30, 0x00FE30, 0x00FE49, 0x00FE4C, 0x00FE50, 0x00FE52, 0x00FE54, 0x00FE57,
                0x00FE5F, 0x00FE61, 0x00FE68, 0x00FE68, 0x00FE6A, 0x00FE6B, 0x00FF01, 0x00FF03,
                0x00FF05, 0x00FF07, 0x00FF0A, 0x00FF0A, 0x00FF0C, 0x00FF0C, 0x00FF0E, 0x00FF0F,
                0x00FF1A, 0x00FF1B, 0x00FF1F, 0x00FF20, 0x00FF3C, 0x00FF3C, 0x00FF61, 0x00FF61,
                0x00FF64, 0x00FF64);
        private static final CodePointSet OPEN_PUNCTUATION = publicCodePointSet("Ps",
                0x000028, 0x000028, 0x00005B, 0x00005B, 0x00007B, 0x00007B, 0x000F3A, 0x000F3A,
                0x000F3C, 0x000F3C, 0x00169B, 0x00169B, 0x00201A, 0x00201A, 0x00201E, 0x00201E,
                0x002045, 0x002045, 0x00207D, 0x00207D, 0x00208D, 0x00208D, 0x002329, 0x002329,
                0x003008, 0x003008, 0x00300A, 0x00300A, 0x00300C, 0x00300C, 0x00300E, 0x00300E,
                0x003010, 0x003010, 0x003014, 0x003014, 0x003016, 0x003016, 0x003018, 0x003018,
                0x00301A, 0x00301A, 0x00301D, 0x00301D, 0x00FD3E, 0x00FD3E, 0x00FE35, 0x00FE35,
                0x00FE37, 0x00FE37, 0x00FE39, 0x00FE39, 0x00FE3B, 0x00FE3B, 0x00FE3D, 0x00FE3D,
                0x00FE3F, 0x00FE3F, 0x00FE41, 0x00FE41, 0x00FE43, 0x00FE43, 0x00FE59, 0x00FE59,
                0x00FE5B, 0x00FE5B, 0x00FE5D, 0x00FE5D, 0x00FF08, 0x00FF08, 0x00FF3B, 0x00FF3B,
                0x00FF5B, 0x00FF5B, 0x00FF62, 0x00FF62);
        private static final CodePointSet CURRENCY_SYMBOLS = publicCodePointSet("Sc",
                0x000024, 0x000024, 0x0000A2, 0x0000A5, 0x0009F2, 0x0009F3, 0x000E3F, 0x000E3F,
                0x0017DB, 0x0017DB, 0x0020A0, 0x0020AF, 0x00FE69, 0x00FE69, 0x00FF04, 0x00FF04,
                0x00FFE0, 0x00FFE1, 0x00FFE5, 0x00FFE6);
        private static final CodePointSet MODIFIER_SYMBOLS = publicCodePointSet("Sk",
                0x00005E, 0x00005E, 0x000060, 0x000060, 0x0000A8, 0x0000A8, 0x0000AF, 0x0000AF,
                0x0000B4, 0x0000B4, 0x0000B8, 0x0000B8, 0x0002B9, 0x0002BA, 0x0002C2, 0x0002CF,
                0x0002D2, 0x0002DF, 0x0002E5, 0x0002ED, 0x000374, 0x000375, 0x000384, 0x000385,
                0x001FBD, 0x001FBD, 0x001FBF, 0x001FC1, 0x001FCD, 0x001FCF, 0x001FDD, 0x001FDF,
                0x001FED, 0x001FEF, 0x001FFD, 0x001FFE, 0x00309B, 0x00309C, 0x00FF3E, 0x00FF3E,
                0x00FF40, 0x00FF40, 0x00FFE3, 0x00FFE3);
        private static final CodePointSet MATH_SYMBOLS = publicCodePointSet("Sm",
                0x00002B, 0x00002B, 0x00003C, 0x00003E, 0x00007C, 0x00007C, 0x00007E, 0x00007E,
                0x0000AC, 0x0000AC, 0x0000B1, 0x0000B1, 0x0000D7, 0x0000D7, 0x0000F7, 0x0000F7,
                0x002044, 0x002044, 0x00207A, 0x00207C, 0x00208A, 0x00208C, 0x002190, 0x002194,
                0x00219A, 0x00219B, 0x0021A0, 0x0021A0, 0x0021A3, 0x0021A3, 0x0021A6, 0x0021A6,
                0x0021AE, 0x0021AE, 0x0021CE, 0x0021CF, 0x0021D2, 0x0021D2, 0x0021D4, 0x0021D4,
                0x002200, 0x0022F1, 0x002308, 0x00230B, 0x002320, 0x002321, 0x0025B7, 0x0025B7,
                0x0025C1, 0x0025C1, 0x00266F, 0x00266F, 0x00FB29, 0x00FB29, 0x00FE62, 0x00FE62,
                0x00FE64, 0x00FE66, 0x00FF0B, 0x00FF0B, 0x00FF1C, 0x00FF1E, 0x00FF5C, 0x00FF5C,
                0x00FF5E, 0x00FF5E, 0x00FFE2, 0x00FFE2, 0x00FFE9, 0x00FFEC, 0x01D6C1, 0x01D6C1,
                0x01D6DB, 0x01D6DB, 0x01D6FB, 0x01D6FB, 0x01D715, 0x01D715, 0x01D735, 0x01D735,
                0x01D74F, 0x01D74F, 0x01D76F, 0x01D76F, 0x01D789, 0x01D789, 0x01D7A9, 0x01D7A9,
                0x01D7C3, 0x01D7C3);
        private static final CodePointSet OTHER_SYMBOLS = publicCodePointSet("So",
                0x0000A6, 0x0000A7, 0x0000A9, 0x0000A9, 0x0000AE, 0x0000AE, 0x0000B0, 0x0000B0,
                0x0000B6, 0x0000B6, 0x000482, 0x000482, 0x0006E9, 0x0006E9, 0x0006FD, 0x0006FE,
                0x0009FA, 0x0009FA, 0x000B70, 0x000B70, 0x000F01, 0x000F03, 0x000F13, 0x000F17,
                0x000F1A, 0x000F1F, 0x000F34, 0x000F34, 0x000F36, 0x000F36, 0x000F38, 0x000F38,
                0x000FBE, 0x000FC5, 0x000FC7, 0x000FCC, 0x000FCF, 0x000FCF, 0x002100, 0x002101,
                0x002103, 0x002106, 0x002108, 0x002109, 0x002114, 0x002114, 0x002116, 0x002118,
                0x00211E, 0x002123, 0x002125, 0x002125, 0x002127, 0x002127, 0x002129, 0x002129,
                0x00212E, 0x00212E, 0x002132, 0x002132, 0x00213A, 0x00213A, 0x002195, 0x002199,
                0x00219C, 0x00219F, 0x0021A1, 0x0021A2, 0x0021A4, 0x0021A5, 0x0021A7, 0x0021AD,
                0x0021AF, 0x0021CD, 0x0021D0, 0x0021D1, 0x0021D3, 0x0021D3, 0x0021D5, 0x0021F3,
                0x002300, 0x002307, 0x00230C, 0x00231F, 0x002322, 0x002328, 0x00232B, 0x00237B,
                0x00237D, 0x00239A, 0x002400, 0x002426, 0x002440, 0x00244A, 0x00249C, 0x0024E9,
                0x002500, 0x002595, 0x0025A0, 0x0025B6, 0x0025B8, 0x0025C0, 0x0025C2, 0x0025F7,
                0x002600, 0x002613, 0x002619, 0x00266E, 0x002670, 0x002671, 0x002701, 0x002704,
                0x002706, 0x002709, 0x00270C, 0x002727, 0x002729, 0x00274B, 0x00274D, 0x00274D,
                0x00274F, 0x002752, 0x002756, 0x002756, 0x002758, 0x00275E, 0x002761, 0x002767,
                0x002794, 0x002794, 0x002798, 0x0027AF, 0x0027B1, 0x0027BE, 0x002800, 0x0028FF,
                0x002E80, 0x002E99, 0x002E9B, 0x002EF3, 0x002F00, 0x002FD5, 0x002FF0, 0x002FFB,
                0x003004, 0x003004, 0x003012, 0x003013, 0x003020, 0x003020, 0x003036, 0x003037,
                0x00303E, 0x00303F, 0x003190, 0x003191, 0x003196, 0x00319F, 0x003200, 0x00321C,
                0x00322A, 0x003243, 0x003260, 0x00327B, 0x00327F, 0x00327F, 0x00328A, 0x0032B0,
                0x0032C0, 0x0032CB, 0x0032D0, 0x0032FE, 0x003300, 0x003376, 0x00337B, 0x0033DD,
                0x0033E0, 0x0033FE, 0x00A490, 0x00A4A1, 0x00A4A4, 0x00A4B3, 0x00A4B5, 0x00A4C0,
                0x00A4C2, 0x00A4C4, 0x00A4C6, 0x00A4C6, 0x00FFE4, 0x00FFE4, 0x00FFE8, 0x00FFE8,
                0x00FFED, 0x00FFEE, 0x00FFFC, 0x00FFFD, 0x01D000, 0x01D0F5, 0x01D100, 0x01D126,
                0x01D12A, 0x01D164, 0x01D16A, 0x01D16C, 0x01D183, 0x01D184, 0x01D18C, 0x01D1A9,
                0x01D1AE, 0x01D1DD);
        private static final CodePointSet LINE_SEPARATORS = publicCodePointSet("Zl", 0x002028, 0x002028);
        private static final CodePointSet PARAGRAPH_SEPARATORS = publicCodePointSet("Zp", 0x002029, 0x002029);
        private static final CodePointSet SPACE_SEPARATORS = publicCodePointSet("Zs",
                0x000020, 0x000020, 0x0000A0, 0x0000A0, 0x001680, 0x001680, 0x002000, 0x00200B,
                0x00202F, 0x00202F, 0x003000, 0x003000);
        private static final int DOT_CODE_POINT = '.';
        private static final int HYPHEN_CODE_POINT = '-';
        private static final int UNDERSCORE_CODE_POINT = '_';
        private static final int COLON_CODE_POINT = ':';

        private static final CodePointSet[] SETS = new CodePointSet[] {
                publicCodePointSet("IsAlphabeticPresentationForms", 0x00FB00, 0x00FB4F),
                publicCodePointSet("IsArabic", 0x000600, 0x0006FF),
                publicCodePointSet("IsArabicPresentationForms-A", 0x00FB50, 0x00FDFF),
                publicCodePointSet("IsArabicPresentationForms-B", 0x00FE70, 0x00FEFE),
                publicCodePointSet("IsArmenian", 0x000530, 0x00058F),
                publicCodePointSet("IsArrows", 0x002190, 0x0021FF),
                publicCodePointSet("IsBasicLatin", 0x000000, 0x00007F),
                publicCodePointSet("IsBengali", 0x000980, 0x0009FF),
                publicCodePointSet("IsBlockElements", 0x002580, 0x00259F),
                publicCodePointSet("IsBopomofo", 0x003100, 0x00312F),
                publicCodePointSet("IsBopomofoExtended", 0x0031A0, 0x0031BF),
                publicCodePointSet("IsBoxDrawing", 0x002500, 0x00257F),
                publicCodePointSet("IsBraillePatterns", 0x002800, 0x0028FF),
                publicCodePointSet("IsByzantineMusicalSymbols", 0x01D000, 0x01D0FF),
                publicCodePointSet("IsCJKCompatibility", 0x003300, 0x0033FF),
                publicCodePointSet("IsCJKCompatibilityForms", 0x00FE30, 0x00FE4F),
                publicCodePointSet("IsCJKCompatibilityIdeographs", 0x00F900, 0x00FAFF),
                publicCodePointSet("IsCJKCompatibilityIdeographsSupplement", 0x02F800, 0x02FA1F),
                publicCodePointSet("IsCJKRadicalsSupplement", 0x002E80, 0x002EFF),
                publicCodePointSet("IsCJKSymbolsandPunctuation", 0x003000, 0x00303F),
                publicCodePointSet("IsCJKUnifiedIdeographs", 0x004E00, 0x009FFF),
                publicCodePointSet("IsCJKUnifiedIdeographsExtensionA", 0x003400, 0x004DB5),
                publicCodePointSet("IsCJKUnifiedIdeographsExtensionB", 0x020000, 0x02A6D6),
                publicCodePointSet("IsCherokee", 0x0013A0, 0x0013FF),
                publicCodePointSet("IsCombiningDiacriticalMarks", 0x000300, 0x00036F),
                publicCodePointSet("IsCombiningHalfMarks", 0x00FE20, 0x00FE2F),
                publicCodePointSet("IsCombiningMarksforSymbols", 0x0020D0, 0x0020FF),
                publicCodePointSet("IsControlPictures", 0x002400, 0x00243F),
                publicCodePointSet("IsCurrencySymbols", 0x0020A0, 0x0020CF),
                publicCodePointSet("IsCyrillic", 0x000400, 0x0004FF),
                publicCodePointSet("IsDeseret", 0x010400, 0x01044F),
                publicCodePointSet("IsDevanagari", 0x000900, 0x00097F),
                publicCodePointSet("IsDingbats", 0x002700, 0x0027BF),
                publicCodePointSet("IsEnclosedAlphanumerics", 0x002460, 0x0024FF),
                publicCodePointSet("IsEnclosedCJKLettersandMonths", 0x003200, 0x0032FF),
                publicCodePointSet("IsEthiopic", 0x001200, 0x00137F),
                publicCodePointSet("IsGeneralPunctuation", 0x002000, 0x00206F),
                publicCodePointSet("IsGeometricShapes", 0x0025A0, 0x0025FF),
                publicCodePointSet("IsGeorgian", 0x0010A0, 0x0010FF),
                publicCodePointSet("IsGothic", 0x010330, 0x01034F),
                publicCodePointSet("IsGreek", 0x000370, 0x0003FF),
                publicCodePointSet("IsGreekExtended", 0x001F00, 0x001FFF),
                publicCodePointSet("IsGujarati", 0x000A80, 0x000AFF),
                publicCodePointSet("IsGurmukhi", 0x000A00, 0x000A7F),
                publicCodePointSet("IsHalfwidthandFullwidthForms", 0x00FF00, 0x00FFEF),
                publicCodePointSet("IsHangulCompatibilityJamo", 0x003130, 0x00318F),
                publicCodePointSet("IsHangulJamo", 0x001100, 0x0011FF),
                publicCodePointSet("IsHangulSyllables", 0x00AC00, 0x00D7A3),
                publicCodePointSet("IsHebrew", 0x000590, 0x0005FF),
                publicCodePointSet("IsHiragana", 0x003040, 0x00309F),
                publicCodePointSet("IsIPAExtensions", 0x000250, 0x0002AF),
                publicCodePointSet("IsIdeographicDescriptionCharacters", 0x002FF0, 0x002FFF),
                publicCodePointSet("IsKanbun", 0x003190, 0x00319F),
                publicCodePointSet("IsKangxiRadicals", 0x002F00, 0x002FDF),
                publicCodePointSet("IsKannada", 0x000C80, 0x000CFF),
                publicCodePointSet("IsKatakana", 0x0030A0, 0x0030FF),
                publicCodePointSet("IsKhmer", 0x001780, 0x0017FF),
                publicCodePointSet("IsLao", 0x000E80, 0x000EFF),
                publicCodePointSet("IsLatinExtendedAdditional", 0x001E00, 0x001EFF),
                publicCodePointSet("IsLatinExtended-A", 0x000100, 0x00017F),
                publicCodePointSet("IsLatinExtended-B", 0x000180, 0x00024F),
                publicCodePointSet("IsLatin-1Supplement", 0x000080, 0x0000FF),
                publicCodePointSet("IsLetterlikeSymbols", 0x002100, 0x00214F),
                publicCodePointSet("IsMalayalam", 0x000D00, 0x000D7F),
                publicCodePointSet("IsMathematicalAlphanumericSymbols", 0x01D400, 0x01D7FF),
                publicCodePointSet("IsMathematicalOperators", 0x002200, 0x0022FF),
                publicCodePointSet("IsMiscellaneousSymbols", 0x002600, 0x0026FF),
                publicCodePointSet("IsMiscellaneousTechnical", 0x002300, 0x0023FF),
                publicCodePointSet("IsMongolian", 0x001800, 0x0018AF),
                publicCodePointSet("IsMusicalSymbols", 0x01D100, 0x01D1FF),
                publicCodePointSet("IsMyanmar", 0x001000, 0x00109F),
                publicCodePointSet("IsNumberForms", 0x002150, 0x00218F),
                publicCodePointSet("IsOgham", 0x001680, 0x00169F),
                publicCodePointSet("IsOldItalic", 0x010300, 0x01032F),
                publicCodePointSet("IsOpticalCharacterRecognition", 0x002440, 0x00245F),
                publicCodePointSet("IsOriya", 0x000B00, 0x000B7F),
                publicCodePointSet("IsPrivateUse", 0x00E000, 0x00F8FF, 0x0F0000, 0x0FFFFD, 0x100000, 0x10FFFD),
                publicCodePointSet("IsRunic", 0x0016A0, 0x0016FF),
                publicCodePointSet("IsSinhala", 0x000D80, 0x000DFF),
                publicCodePointSet("IsSmallFormVariants", 0x00FE50, 0x00FE6F),
                publicCodePointSet("IsSpacingModifierLetters", 0x0002B0, 0x0002FF),
                publicCodePointSet("IsSpecials", 0x00FEFF, 0x00FEFF, 0x00FFF0, 0x00FFFD),
                publicCodePointSet("IsSuperscriptsandSubscripts", 0x002070, 0x00209F),
                publicCodePointSet("IsSyriac", 0x000700, 0x00074F),
                publicCodePointSet("IsTags", 0x0E0000, 0x0E007F),
                publicCodePointSet("IsTamil", 0x000B80, 0x000BFF),
                publicCodePointSet("IsTelugu", 0x000C00, 0x000C7F),
                publicCodePointSet("IsThaana", 0x000780, 0x0007BF),
                publicCodePointSet("IsThai", 0x000E00, 0x000E7F),
                publicCodePointSet("IsTibetan", 0x000F00, 0x000FFF),
                publicCodePointSet("IsUnifiedCanadianAboriginalSyllabics", 0x001400, 0x00167F),
                publicCodePointSet("IsYiRadicals", 0x00A490, 0x00A4CF),
                publicCodePointSet("IsYiSyllables", 0x00A000, 0x00A48F),
                CodePointSet.publicCodePointSet("C", CONTROL_CHARACTERS, FORMAT_CHARACTERS, PRIVATE_USE),
                CONTROL_CHARACTERS,
                FORMAT_CHARACTERS,
                PRIVATE_USE,
                CodePointSet.publicCodePointSet("L", LOWERCASE_LETTERS, MODIFIER_LETTERS, OTHER_LETTERS, TITLECASE_LETTERS, UPPERCASE_LETTERS),
                LOWERCASE_LETTERS,
                MODIFIER_LETTERS,
                OTHER_LETTERS,
                TITLECASE_LETTERS,
                UPPERCASE_LETTERS,
                CodePointSet.publicCodePointSet("M", SPACING_COMBINING_MARKS, ENCLOSING_MARKS, NONSPACING_MARKS),
                SPACING_COMBINING_MARKS,
                ENCLOSING_MARKS,
                NONSPACING_MARKS,
                CodePointSet.publicCodePointSet("N", DECIMAL_DIGITS, LETTER_NUMBERS, OTHER_NUMBERS),
                DECIMAL_DIGITS,
                LETTER_NUMBERS,
                OTHER_NUMBERS,
                CodePointSet.publicCodePointSet("P",
                        CONNECTOR_PUNCTUATION,
                        DASH_PUNCTUATION,
                        CLOSE_PUNCTUATION,
                        FINAL_QUOTE_PUNCTUATION,
                        INITIAL_QUOTE_PUNCTUATION,
                        OTHER_PUNCTUATION,
                        OPEN_PUNCTUATION),
                CONNECTOR_PUNCTUATION,
                DASH_PUNCTUATION,
                CLOSE_PUNCTUATION,
                FINAL_QUOTE_PUNCTUATION,
                INITIAL_QUOTE_PUNCTUATION,
                OTHER_PUNCTUATION,
                OPEN_PUNCTUATION,
                CodePointSet.publicCodePointSet("S", CURRENCY_SYMBOLS, MODIFIER_SYMBOLS, MATH_SYMBOLS, OTHER_SYMBOLS),
                CURRENCY_SYMBOLS,
                MODIFIER_SYMBOLS,
                MATH_SYMBOLS,
                OTHER_SYMBOLS,
                CodePointSet.publicCodePointSet("Z", LINE_SEPARATORS, PARAGRAPH_SEPARATORS, SPACE_SEPARATORS),
                LINE_SEPARATORS,
                PARAGRAPH_SEPARATORS,
                SPACE_SEPARATORS,
                privateCodePointSet("NameChar",
                        DOT_CODE_POINT, DOT_CODE_POINT,
                        HYPHEN_CODE_POINT, HYPHEN_CODE_POINT,
                        UNDERSCORE_CODE_POINT, UNDERSCORE_CODE_POINT,
                        COLON_CODE_POINT, COLON_CODE_POINT,
                        // BaseChar
                        0x000041, 0x00005A, 0x000061, 0x00007A, 0x0000C0, 0x0000D6, 0x0000D8, 0x0000F6,
                        0x0000F8, 0x0000FF, 0x000100, 0x000131, 0x000134, 0x00013E, 0x000141, 0x000148,
                        0x00014A, 0x00017E, 0x000180, 0x0001C3, 0x0001CD, 0x0001F0, 0x0001F4, 0x0001F5,
                        0x0001FA, 0x000217, 0x000250, 0x0002A8, 0x0002BB, 0x0002C1, 0x000386, 0x000386,
                        0x000388, 0x00038A, 0x00038C, 0x00038C, 0x00038E, 0x0003A1, 0x0003A3, 0x0003CE,
                        0x0003D0, 0x0003D6, 0x0003DA, 0x0003DA, 0x0003DC, 0x0003DC, 0x0003DE, 0x0003DE,
                        0x0003E0, 0x0003E0, 0x0003E2, 0x0003F3, 0x000401, 0x00040C, 0x00040E, 0x00044F,
                        0x000451, 0x00045C, 0x00045E, 0x000481, 0x000490, 0x0004C4, 0x0004C7, 0x0004C8,
                        0x0004CB, 0x0004CC, 0x0004D0, 0x0004EB, 0x0004EE, 0x0004F5, 0x0004F8, 0x0004F9,
                        0x000531, 0x000556, 0x000559, 0x000559, 0x000561, 0x000586, 0x0005D0, 0x0005EA,
                        0x0005F0, 0x0005F2, 0x000621, 0x00063A, 0x000641, 0x00064A, 0x000671, 0x0006B7,
                        0x0006BA, 0x0006BE, 0x0006C0, 0x0006CE, 0x0006D0, 0x0006D3, 0x0006D5, 0x0006D5,
                        0x0006E5, 0x0006E6, 0x000905, 0x000939, 0x00093D, 0x00093D, 0x000958, 0x000961,
                        0x000985, 0x00098C, 0x00098F, 0x000990, 0x000993, 0x0009A8, 0x0009AA, 0x0009B0,
                        0x0009B2, 0x0009B2, 0x0009B6, 0x0009B9, 0x0009DC, 0x0009DD, 0x0009DF, 0x0009E1,
                        0x0009F0, 0x0009F1, 0x000A05, 0x000A0A, 0x000A0F, 0x000A10, 0x000A13, 0x000A28,
                        0x000A2A, 0x000A30, 0x000A32, 0x000A33, 0x000A35, 0x000A36, 0x000A38, 0x000A39,
                        0x000A59, 0x000A5C, 0x000A5E, 0x000A5E, 0x000A72, 0x000A74, 0x000A85, 0x000A8B,
                        0x000A8D, 0x000A8D, 0x000A8F, 0x000A91, 0x000A93, 0x000AA8, 0x000AAA, 0x000AB0,
                        0x000AB2, 0x000AB3, 0x000AB5, 0x000AB9, 0x000ABD, 0x000ABD, 0x000AE0, 0x000AE0,
                        0x000B05, 0x000B0C, 0x000B0F, 0x000B10, 0x000B13, 0x000B28, 0x000B2A, 0x000B30,
                        0x000B32, 0x000B33, 0x000B36, 0x000B39, 0x000B3D, 0x000B3D, 0x000B5C, 0x000B5D,
                        0x000B5F, 0x000B61, 0x000B85, 0x000B8A, 0x000B8E, 0x000B90, 0x000B92, 0x000B95,
                        0x000B99, 0x000B9A, 0x000B9C, 0x000B9C, 0x000B9E, 0x000B9F, 0x000BA3, 0x000BA4,
                        0x000BA8, 0x000BAA, 0x000BAE, 0x000BB5, 0x000BB7, 0x000BB9, 0x000C05, 0x000C0C,
                        0x000C0E, 0x000C10, 0x000C12, 0x000C28, 0x000C2A, 0x000C33, 0x000C35, 0x000C39,
                        0x000C60, 0x000C61, 0x000C85, 0x000C8C, 0x000C8E, 0x000C90, 0x000C92, 0x000CA8,
                        0x000CAA, 0x000CB3, 0x000CB5, 0x000CB9, 0x000CDE, 0x000CDE, 0x000CE0, 0x000CE1,
                        0x000D05, 0x000D0C, 0x000D0E, 0x000D10, 0x000D12, 0x000D28, 0x000D2A, 0x000D39,
                        0x000D60, 0x000D61, 0x000E01, 0x000E2E, 0x000E30, 0x000E30, 0x000E32, 0x000E33,
                        0x000E40, 0x000E45, 0x000E81, 0x000E82, 0x000E84, 0x000E84, 0x000E87, 0x000E88,
                        0x000E8A, 0x000E8A, 0x000E8D, 0x000E8D, 0x000E94, 0x000E97, 0x000E99, 0x000E9F,
                        0x000EA1, 0x000EA3, 0x000EA5, 0x000EA5, 0x000EA7, 0x000EA7, 0x000EAA, 0x000EAB,
                        0x000EAD, 0x000EAE, 0x000EB0, 0x000EB0, 0x000EB2, 0x000EB3, 0x000EBD, 0x000EBD,
                        0x000EC0, 0x000EC4, 0x000F40, 0x000F47, 0x000F49, 0x000F69, 0x0010A0, 0x0010C5,
                        0x0010D0, 0x0010F6, 0x001100, 0x001100, 0x001102, 0x001103, 0x001105, 0x001107,
                        0x001109, 0x001109, 0x00110B, 0x00110C, 0x00110E, 0x001112, 0x00113C, 0x00113C,
                        0x00113E, 0x00113E, 0x001140, 0x001140, 0x00114C, 0x00114C, 0x00114E, 0x00114E,
                        0x001150, 0x001150, 0x001154, 0x001155, 0x001159, 0x001159, 0x00115F, 0x001161,
                        0x001163, 0x001163, 0x001165, 0x001165, 0x001167, 0x001167, 0x001169, 0x001169,
                        0x00116D, 0x00116E, 0x001172, 0x001173, 0x001175, 0x001175, 0x00119E, 0x00119E,
                        0x0011A8, 0x0011A8, 0x0011AB, 0x0011AB, 0x0011AE, 0x0011AF, 0x0011B7, 0x0011B8,
                        0x0011BA, 0x0011BA, 0x0011BC, 0x0011C2, 0x0011EB, 0x0011EB, 0x0011F0, 0x0011F0,
                        0x0011F9, 0x0011F9, 0x001E00, 0x001E9B, 0x001EA0, 0x001EF9, 0x001F00, 0x001F15,
                        0x001F18, 0x001F1D, 0x001F20, 0x001F45, 0x001F48, 0x001F4D, 0x001F50, 0x001F57,
                        0x001F59, 0x001F59, 0x001F5B, 0x001F5B, 0x001F5D, 0x001F5D, 0x001F5F, 0x001F7D,
                        0x001F80, 0x001FB4, 0x001FB6, 0x001FBC, 0x001FBE, 0x001FBE, 0x001FC2, 0x001FC4,
                        0x001FC6, 0x001FCC, 0x001FD0, 0x001FD3, 0x001FD6, 0x001FDB, 0x001FE0, 0x001FEC,
                        0x001FF2, 0x001FF4, 0x001FF6, 0x001FFC, 0x002126, 0x002126, 0x00212A, 0x00212B,
                        0x00212E, 0x00212E, 0x002180, 0x002182, 0x003041, 0x003094, 0x0030A1, 0x0030FA,
                        0x003105, 0x00312C, 0x00AC00, 0x00D7A3,
                        // Ideographic
                        0x004E00, 0x009FA5, 0x003007, 0x003007, 0x003021, 0x003029,
                        // Digit
                        0x000030, 0x000039, 0x000660, 0x000669, 0x0006F0, 0x0006F9, 0x000966, 0x00096F,
                        0x0009E6, 0x0009EF, 0x000A66, 0x000A6F, 0x000AE6, 0x000AEF, 0x000B66, 0x000B6F,
                        0x000BE7, 0x000BEF, 0x000C66, 0x000C6F, 0x000CE6, 0x000CEF, 0x000D66, 0x000D6F,
                        0x000E50, 0x000E59, 0x000ED0, 0x000ED9, 0x000F20, 0x000F29,
                        // CombiningChar
                        0x000300, 0x000345, 0x000360, 0x000361, 0x000483, 0x000486, 0x000591, 0x0005A1,
                        0x0005A3, 0x0005B9, 0x0005BB, 0x0005BD, 0x0005BF, 0x0005BF, 0x0005C1, 0x0005C2,
                        0x0005C4, 0x0005C4, 0x00064B, 0x000652, 0x000670, 0x000670, 0x0006D6, 0x0006DC,
                        0x0006DD, 0x0006DF, 0x0006E0, 0x0006E4, 0x0006E7, 0x0006E8, 0x0006EA, 0x0006ED,
                        0x000901, 0x000903, 0x00093C, 0x00093C, 0x00093E, 0x00094C, 0x00094D, 0x00094D,
                        0x000951, 0x000954, 0x000962, 0x000963, 0x000981, 0x000983, 0x0009BC, 0x0009BC,
                        0x0009BE, 0x0009BE, 0x0009BF, 0x0009BF, 0x0009C0, 0x0009C4, 0x0009C7, 0x0009C8,
                        0x0009CB, 0x0009CD, 0x0009D7, 0x0009D7, 0x0009E2, 0x0009E3, 0x000A02, 0x000A02,
                        0x000A3C, 0x000A3C, 0x000A3E, 0x000A3E, 0x000A3F, 0x000A3F, 0x000A40, 0x000A42,
                        0x000A47, 0x000A48, 0x000A4B, 0x000A4D, 0x000A70, 0x000A71, 0x000A81, 0x000A83,
                        0x000ABC, 0x000ABC, 0x000ABE, 0x000AC5, 0x000AC7, 0x000AC9, 0x000ACB, 0x000ACD,
                        0x000B01, 0x000B03, 0x000B3C, 0x000B3C, 0x000B3E, 0x000B43, 0x000B47, 0x000B48,
                        0x000B4B, 0x000B4D, 0x000B56, 0x000B57, 0x000B82, 0x000B83, 0x000BBE, 0x000BC2,
                        0x000BC6, 0x000BC8, 0x000BCA, 0x000BCD, 0x000BD7, 0x000BD7, 0x000C01, 0x000C03,
                        0x000C3E, 0x000C44, 0x000C46, 0x000C48, 0x000C4A, 0x000C4D, 0x000C55, 0x000C56,
                        0x000C82, 0x000C83, 0x000CBE, 0x000CC4, 0x000CC6, 0x000CC8, 0x000CCA, 0x000CCD,
                        0x000CD5, 0x000CD6, 0x000D02, 0x000D03, 0x000D3E, 0x000D43, 0x000D46, 0x000D48,
                        0x000D4A, 0x000D4D, 0x000D57, 0x000D57, 0x000E31, 0x000E31, 0x000E34, 0x000E3A,
                        0x000E47, 0x000E4E, 0x000EB1, 0x000EB1, 0x000EB4, 0x000EB9, 0x000EBB, 0x000EBC,
                        0x000EC8, 0x000ECD, 0x000F18, 0x000F19, 0x000F35, 0x000F35, 0x000F37, 0x000F37,
                        0x000F39, 0x000F39, 0x000F3E, 0x000F3E, 0x000F3F, 0x000F3F, 0x000F71, 0x000F84,
                        0x000F86, 0x000F8B, 0x000F90, 0x000F95, 0x000F97, 0x000F97, 0x000F99, 0x000FAD,
                        0x000FB1, 0x000FB7, 0x000FB9, 0x000FB9, 0x0020D0, 0x0020DC, 0x0020E1, 0x0020E1,
                        0x00302A, 0x00302F, 0x003099, 0x003099, 0x00309A, 0x00309A,
                        // Extender
                        0x0000B7, 0x0000B7, 0x0002D0, 0x0002D0, 0x0002D1, 0x0002D1, 0x000387, 0x000387,
                        0x000640, 0x000640, 0x000E46, 0x000E46, 0x000EC6, 0x000EC6, 0x003005, 0x003005,
                        0x003031, 0x003035, 0x00309D, 0x00309E, 0x0030FC, 0x0030FE),
                privateCodePointSet("InitialNameChar",
                        UNDERSCORE_CODE_POINT, UNDERSCORE_CODE_POINT,
                        COLON_CODE_POINT, COLON_CODE_POINT,
                        // BaseChar
                        0x000041, 0x00005A, 0x000061, 0x00007A, 0x0000C0, 0x0000D6, 0x0000D8, 0x0000F6,
                        0x0000F8, 0x0000FF, 0x000100, 0x000131, 0x000134, 0x00013E, 0x000141, 0x000148,
                        0x00014A, 0x00017E, 0x000180, 0x0001C3, 0x0001CD, 0x0001F0, 0x0001F4, 0x0001F5,
                        0x0001FA, 0x000217, 0x000250, 0x0002A8, 0x0002BB, 0x0002C1, 0x000386, 0x000386,
                        0x000388, 0x00038A, 0x00038C, 0x00038C, 0x00038E, 0x0003A1, 0x0003A3, 0x0003CE,
                        0x0003D0, 0x0003D6, 0x0003DA, 0x0003DA, 0x0003DC, 0x0003DC, 0x0003DE, 0x0003DE,
                        0x0003E0, 0x0003E0, 0x0003E2, 0x0003F3, 0x000401, 0x00040C, 0x00040E, 0x00044F,
                        0x000451, 0x00045C, 0x00045E, 0x000481, 0x000490, 0x0004C4, 0x0004C7, 0x0004C8,
                        0x0004CB, 0x0004CC, 0x0004D0, 0x0004EB, 0x0004EE, 0x0004F5, 0x0004F8, 0x0004F9,
                        0x000531, 0x000556, 0x000559, 0x000559, 0x000561, 0x000586, 0x0005D0, 0x0005EA,
                        0x0005F0, 0x0005F2, 0x000621, 0x00063A, 0x000641, 0x00064A, 0x000671, 0x0006B7,
                        0x0006BA, 0x0006BE, 0x0006C0, 0x0006CE, 0x0006D0, 0x0006D3, 0x0006D5, 0x0006D5,
                        0x0006E5, 0x0006E6, 0x000905, 0x000939, 0x00093D, 0x00093D, 0x000958, 0x000961,
                        0x000985, 0x00098C, 0x00098F, 0x000990, 0x000993, 0x0009A8, 0x0009AA, 0x0009B0,
                        0x0009B2, 0x0009B2, 0x0009B6, 0x0009B9, 0x0009DC, 0x0009DD, 0x0009DF, 0x0009E1,
                        0x0009F0, 0x0009F1, 0x000A05, 0x000A0A, 0x000A0F, 0x000A10, 0x000A13, 0x000A28,
                        0x000A2A, 0x000A30, 0x000A32, 0x000A33, 0x000A35, 0x000A36, 0x000A38, 0x000A39,
                        0x000A59, 0x000A5C, 0x000A5E, 0x000A5E, 0x000A72, 0x000A74, 0x000A85, 0x000A8B,
                        0x000A8D, 0x000A8D, 0x000A8F, 0x000A91, 0x000A93, 0x000AA8, 0x000AAA, 0x000AB0,
                        0x000AB2, 0x000AB3, 0x000AB5, 0x000AB9, 0x000ABD, 0x000ABD, 0x000AE0, 0x000AE0,
                        0x000B05, 0x000B0C, 0x000B0F, 0x000B10, 0x000B13, 0x000B28, 0x000B2A, 0x000B30,
                        0x000B32, 0x000B33, 0x000B36, 0x000B39, 0x000B3D, 0x000B3D, 0x000B5C, 0x000B5D,
                        0x000B5F, 0x000B61, 0x000B85, 0x000B8A, 0x000B8E, 0x000B90, 0x000B92, 0x000B95,
                        0x000B99, 0x000B9A, 0x000B9C, 0x000B9C, 0x000B9E, 0x000B9F, 0x000BA3, 0x000BA4,
                        0x000BA8, 0x000BAA, 0x000BAE, 0x000BB5, 0x000BB7, 0x000BB9, 0x000C05, 0x000C0C,
                        0x000C0E, 0x000C10, 0x000C12, 0x000C28, 0x000C2A, 0x000C33, 0x000C35, 0x000C39,
                        0x000C60, 0x000C61, 0x000C85, 0x000C8C, 0x000C8E, 0x000C90, 0x000C92, 0x000CA8,
                        0x000CAA, 0x000CB3, 0x000CB5, 0x000CB9, 0x000CDE, 0x000CDE, 0x000CE0, 0x000CE1,
                        0x000D05, 0x000D0C, 0x000D0E, 0x000D10, 0x000D12, 0x000D28, 0x000D2A, 0x000D39,
                        0x000D60, 0x000D61, 0x000E01, 0x000E2E, 0x000E30, 0x000E30, 0x000E32, 0x000E33,
                        0x000E40, 0x000E45, 0x000E81, 0x000E82, 0x000E84, 0x000E84, 0x000E87, 0x000E88,
                        0x000E8A, 0x000E8A, 0x000E8D, 0x000E8D, 0x000E94, 0x000E97, 0x000E99, 0x000E9F,
                        0x000EA1, 0x000EA3, 0x000EA5, 0x000EA5, 0x000EA7, 0x000EA7, 0x000EAA, 0x000EAB,
                        0x000EAD, 0x000EAE, 0x000EB0, 0x000EB0, 0x000EB2, 0x000EB3, 0x000EBD, 0x000EBD,
                        0x000EC0, 0x000EC4, 0x000F40, 0x000F47, 0x000F49, 0x000F69, 0x0010A0, 0x0010C5,
                        0x0010D0, 0x0010F6, 0x001100, 0x001100, 0x001102, 0x001103, 0x001105, 0x001107,
                        0x001109, 0x001109, 0x00110B, 0x00110C, 0x00110E, 0x001112, 0x00113C, 0x00113C,
                        0x00113E, 0x00113E, 0x001140, 0x001140, 0x00114C, 0x00114C, 0x00114E, 0x00114E,
                        0x001150, 0x001150, 0x001154, 0x001155, 0x001159, 0x001159, 0x00115F, 0x001161,
                        0x001163, 0x001163, 0x001165, 0x001165, 0x001167, 0x001167, 0x001169, 0x001169,
                        0x00116D, 0x00116E, 0x001172, 0x001173, 0x001175, 0x001175, 0x00119E, 0x00119E,
                        0x0011A8, 0x0011A8, 0x0011AB, 0x0011AB, 0x0011AE, 0x0011AF, 0x0011B7, 0x0011B8,
                        0x0011BA, 0x0011BA, 0x0011BC, 0x0011C2, 0x0011EB, 0x0011EB, 0x0011F0, 0x0011F0,
                        0x0011F9, 0x0011F9, 0x001E00, 0x001E9B, 0x001EA0, 0x001EF9, 0x001F00, 0x001F15,
                        0x001F18, 0x001F1D, 0x001F20, 0x001F45, 0x001F48, 0x001F4D, 0x001F50, 0x001F57,
                        0x001F59, 0x001F59, 0x001F5B, 0x001F5B, 0x001F5D, 0x001F5D, 0x001F5F, 0x001F7D,
                        0x001F80, 0x001FB4, 0x001FB6, 0x001FBC, 0x001FBE, 0x001FBE, 0x001FC2, 0x001FC4,
                        0x001FC6, 0x001FCC, 0x001FD0, 0x001FD3, 0x001FD6, 0x001FDB, 0x001FE0, 0x001FEC,
                        0x001FF2, 0x001FF4, 0x001FF6, 0x001FFC, 0x002126, 0x002126, 0x00212A, 0x00212B,
                        0x00212E, 0x00212E, 0x002180, 0x002182, 0x003041, 0x003094, 0x0030A1, 0x0030FA,
                        0x003105, 0x00312C, 0x00AC00, 0x00D7A3,
                        // Ideographic
                        0x004E00, 0x009FA5, 0x003007, 0x003007, 0x003021, 0x003029)
        };

        private CodePointSetTable() {}

        public static int getSize()
        {
            return SETS.length;
        }

        public static byte[] getName(int index)
        {
            verify(index >= 0 && index < SETS.length, "set index out of bounds");
            return SETS[index].name();
        }

        public static int[] getRanges(int index)
        {
            verify(index >= 0 && index < SETS.length, "set index out of bounds");
            return SETS[index].ranges();
        }

        public static boolean isPublic(int index)
        {
            if (index >= 0 && index < SETS.length) {
                return !SETS[index].internal();
            }
            return false;
        }
    }

    /**
     * This class represents a named code point set. The 'ranges' field is an array that adheres
     * to the jcodings contract, where the first element specifies the number of ranges (N),
     * followed by N pairs of numbers representing closed code point ranges. The 'internal' flag
     * indicates whether the code point set can be used in a regex pattern provided by the user.
     */
    record CodePointSet(byte[] name, boolean internal, int[] ranges)
    {
        public static CodePointSet publicCodePointSet(String name, CodePointSet... ranges)
        {
            return new CodePointSet(name.getBytes(UTF_8), false, join(ranges));
        }

        public static CodePointSet publicCodePointSet(String name, int... ranges)
        {
            return new CodePointSet(name.getBytes(UTF_8), false, includeRangeCount(ranges));
        }

        public static CodePointSet privateCodePointSet(String name, int... ranges)
        {
            return new CodePointSet(name.getBytes(UTF_8), true, includeRangeCount(ranges));
        }

        CodePointSet
        {
            checkArgument(ranges.length > 0, "ranges must not be empty");
            checkArgument(ranges.length % 2 == 1, "ranges length must be odd");
            checkArgument(ranges[0] == (ranges.length - 1) / 2, "ranges[0] must contain range count");
        }

        private static int[] includeRangeCount(int[] ranges)
        {
            checkArgument(ranges.length > 0, "ranges must not be empty");
            checkArgument(ranges.length % 2 == 0, "ranges length must be even");

            int[] rangesWithCount = new int[ranges.length + 1];

            System.arraycopy(ranges, 0, rangesWithCount, 1, ranges.length);
            Arrays.sort(rangesWithCount, 1, rangesWithCount.length);
            rangesWithCount[0] = ranges.length / 2;

            return rangesWithCount;
        }

        private static int[] join(CodePointSet... rangesToJoin)
        {
            Set<Range<Integer>> joinedRanges = joinRanges(rangesToJoin);

            int[] rangesWithCount = new int[(joinedRanges.size() * 2) + 1];

            int index = 0;
            rangesWithCount[index++] = joinedRanges.size();
            for (Range<Integer> range : joinedRanges) {
                if (range.lowerBoundType() == BoundType.CLOSED) {
                    rangesWithCount[index++] = range.lowerEndpoint();
                }
                else {
                    rangesWithCount[index++] = range.lowerEndpoint() + 1;
                }
                if (range.upperBoundType() == BoundType.CLOSED) {
                    rangesWithCount[index++] = range.upperEndpoint();
                }
                else {
                    rangesWithCount[index++] = range.upperEndpoint() - 1;
                }
            }

            return rangesWithCount;
        }

        private static Set<Range<Integer>> joinRanges(CodePointSet[] rangesToJoin)
        {
            RangeSet<Integer> joinedRangeSet = TreeRangeSet.create();
            for (CodePointSet ranges : rangesToJoin) {
                for (int i = 1; i < ranges.ranges.length; i += 2) {
                    int lower = ranges.ranges[i];
                    int upper = ranges.ranges[i + 1];
                    joinedRangeSet.add(Range.closed(lower, upper).canonical(DiscreteDomain.integers()));
                }
            }
            return joinedRangeSet.asRanges();
        }
    }
}
