trigger:
  batch: true
  branches:
    include:
      - cccs-main

variables:
  containerRegistry: uchimera
  m2RepoNodePath: /datadisks/disk1/.m2/repository
  m2RepoContainerPath: /tmp/m2/repository

parameters:
- name: skipChecks
  type: boolean
  default: false

jobs:
  - job: PrepareNode
    displayName: Prepare the node for the Container Build
    pool: cauldron-vmss
    steps:
      - checkout: none
      - bash: |
          mkdir -p ${{ variables.m2RepoNodePath }}
        displayName: Create required directories

  - job: ContainerBuild
    timeoutInMinutes: 120
    dependsOn:
      - PrepareNode
    displayName: Maven Build (Container)
    pool: cybertron-build-pool
    variables:
      containerRegistry: uchimera
      imageRepository: cccs/trino-base
      buildTimestamp: $[format('{0:yyyyMMddHHmmss}', pipeline.startTime)]
      DOCKER_BUILDKIT: 1
      MAVEN_INSTALL_OPTS: "-Xmx4G -XX:+ExitOnOutOfMemoryError"
      MAVEN_FAST_INSTALL: "-B -V -T 1C -DskipTests -Dmaven.source.skip=true"
      SKIPPED_PROJECTS: "!:trino-docs,!:trino-server-rpm,!:trino-blackhole,!:trino-duckdb,!:trino-exasol,!:trino-faker,!:trino-hdfs,!:trino-hive,!:trino-hudi,!:trino-ignite,!:trino-kafka,!:trino-kafka-event-listener,!:trino-loki,!:trino-phoenix5,!:trino-pinot,!:trino-ranger,!:trino-snowflake,!:trino-example-http,!:trino-google-sheets,!:trino-druid,!:trino-exchange-hdfs,!:trino-openlineage,!:trino-thrift-api,!:trino-thrift-testing-server,!:trino-thrift,!:trino-clickhouse,!:trino-spooling-filesystem,!:trino-opensearch,!:trino-vertica,!:trino-singlestore,!:trino-teradata-functions,!:trino-elasticsearch,!:trino-kudu,!:trino-bigquery,!:trino-testing-resources,!:trino-delta-lake,!:trino-prometheus,!:trino-cassandra,!:trino-sqlserver,!:trino-mariadb,!:trino-redis,!:trino-redshift,!:trino-example-jdbc,!:trino-proxy,!:trino-verifier,!:trino-benchmark-queries,!:trino-benchto-benchmarks,!:trino-tests,!:trino-faulttolerant-tests,!:trino-plugin-reader,!:trino-product-tests-groups,!:trino-product-tests,!:trino-product-tests-launcher,!:trino-server-dev,!:trino-test-jdbc-compatibility-old-driver,!:trino-test-jdbc-compatibility-old-server,!:trino-testing-services,!:trino-testing,!:trino-testing-containers,!:trino-testing-kafka"
    container:
      image: uchimera.azurecr.io/cccs/dev/trino-build:465_cccs-main_20241205164426_b11358
      options: --entrypoint="" --user=0
      endpoint: uchimera
      volumes:
        - "${{ variables.m2RepoNodePath }}:${{ variables.m2RepoContainerPath }}"
    steps:
      - task: Bash@3
        displayName: Parse Source Control Branch Name
        inputs:
          targetType: 'inline'
          script: |
            BRANCH_NAME=$(echo "$SYSTEM_PULLREQUEST_SOURCEBRANCH $BUILD_SOURCEBRANCH" | sed -r 's/^\s*(refs\/heads\/)?(\S*).*$/\2/' | sed 's/\//_/g')
            echo "##vso[task.setvariable variable=BRANCH_NAME]$BRANCH_NAME"
      - task: MavenAuthenticate@0
        displayName: Authenticate to cccs-stratus Feed
        inputs:
          mavenServiceConnections: cccs-stratus
      - task: Bash@3
        displayName: Maven build
        inputs:
          targetType: 'inline'
          script: |
            MAVEN_OPTS="${{ variables.MAVEN_INSTALL_OPTS }}"
            $(Build.SourcesDirectory)/mvnw clean install ${{ variables.MAVEN_FAST_INSTALL }} -e -pl '${{ variables.SKIPPED_PROJECTS }}' -Dsmartbuilder.profiling=true -Dmaven.repo.local=${{ variables.m2RepoContainerPath }}
        condition: ne('${{ parameters.skipChecks }}', true)
      - task: Bash@3
        displayName: Maven build without checks
        inputs:
          targetType: 'inline'
          script: |
            MAVEN_OPTS="${{ variables.MAVEN_INSTALL_OPTS }}"
            $(Build.SourcesDirectory)/mvnw clean install ${{ variables.MAVEN_FAST_INSTALL }} -Dair.check.skip-all -e -pl '${{ variables.SKIPPED_PROJECTS }}' -Dsmartbuilder.profiling=true -Dmaven.repo.local=${{ variables.m2RepoContainerPath }}
        condition: eq('${{ parameters.skipChecks }}', true)
      - task: Docker@2
        displayName: Login to ${{ variables.containerRegistry }}
        inputs:
          command: login
          containerRegistry: ${{ variables.containerRegistry }}
      - task: Bash@3
        displayName: Build Base Image
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)/core/docker
            chmod g+w ${HOME}
            chmod ug+x ./build.sh
            ./build.sh -a amd64 -x
            if [ $? -ne 0 ]; then
            echo "Docker build failed"
            exit 1
            fi
            TRINO_VERSION=$("$(Build.SourcesDirectory)/mvnw" -f "$(Build.SourcesDirectory)/pom.xml" --quiet help:evaluate -Dexpression=project.version -DforceStdout)
            DOCKERFILE="FROM trino:${TRINO_VERSION}-amd64
            LABEL cccs.trino.upstream.version=${TRINO_VERSION}"
            DOCKERFILE_PATH=$(mktemp -d)/Dockerfile
            echo "${DOCKERFILE}" > "${DOCKERFILE_PATH}"
            echo "##vso[task.setvariable variable=DOCKERFILE_PATH]$DOCKERFILE_PATH"
            echo "DOCKERFILE:"
            echo "${DOCKERFILE}"
      - task: Docker@2
        displayName: Finalize, tag and push image to ${{ variables.containerRegistry }}
        inputs:
          command: buildAndPush
          containerRegistry: ${{ variables.containerRegistry }}
          repository: ${{ variables.imageRepository }}
          Dockerfile: $(DOCKERFILE_PATH)
          tags: |
            $(BRANCH_NAME)
            $(BRANCH_NAME)_$(buildTimestamp)_b$(Build.BuildId)
      - task: Docker@2
        displayName: Logout of ${{ variables.containerRegistry }}
        inputs:
          command: logout
          containerRegistry: ${{ variables.containerRegistry }}
        condition: always()
